{"version":3,"file":"dist/mceliece.debug.js","sources":["libsodium/src/libsodium/randombytes/randombytes.c","libsodium/src/libsodium/sodium/utils.c","libsodium/src/libsodium/crypto_core/salsa/ref/core_salsa_ref.c","libsodium/src/libsodium/include/sodium/private/common.h","libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.c","libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h","libsodium/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.c","libsodium/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.c","libsodium/src/libsodium/crypto_stream/salsa20/stream_salsa20.c","libsodium/src/libsodium/crypto_verify/sodium/verify.c","mcbits/Keccak-simple.c","mcbits/benes.c","mcbits/bm.c","mcbits/decrypt.c","mcbits/encrypt.c","mcbits/fft.c","mcbits/fft_tr.c","mcbits/gf.c","mcbits/operations.c","mcbits/pk_gen.c","mcbits/sk_gen.c","mcbits/transpose.c","mcbits/util.c","mcbits/vec.c","mceliece.c"],"names":[],"mappingseA;AA4BA;;;;;;;;;;AAkCA;AAAA;AAGA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;;;;AAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;;;;;;;;;;;AC1GA;AADA;AAEA;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjhCA;AAAA;AAAA;;AAkuFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;AAlCA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;AAOA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AFpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;AApBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA;;AApBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAgCA;AAAA;;AA9BA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoktWA;AAAA;;AAEA;AACA;AAAA;;AAIA;AACA;AAAA;AAAA;;AAKA;;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAEA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAEA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAtDA;AAAA;AAAA;AAMA;;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;;AALA;AAAA;AAAA;;AAgBA;;;;;;;;;;;;;ACrBA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;;AAKA;;;;;;;;;;;;;;;;;AAOA;AAEA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;;AAKA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;;AAMA;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAOA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AACA;AAIA;;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;AAIA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;;;AAGA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AA/IA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;AAtDA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAAA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAG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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;;AACA;AAAA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;;AADA;AAAA;AAAA;;AAUA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;;AAlBA;AAAA;AAAA;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;AAAA;AAAA;;AADA;AAAA;AAAA;AAAA;AAAA;;AALA;AAAA;AAAA;;AAgBA;;AAAA;AAAA;;;;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAPA;AAAA;AAAA;;AAaA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;AAEA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;AAAA;AAAA;;AAOA;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;AC5LA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;AAOA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;A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AAA;;;;AACA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAJA;AAAA;;AADA;AAAA;AAAA;;AAWA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AADA;AAAA;AAAA;;AAKA;;AAAA;AAAA;;;;AACA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;AAGA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAPA;AAAA;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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","sourcesContent":["\n#include <assert.h>\n#include <limits.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n#include <sys/types.h>\n\n#ifdef __EMSCRIPTEN__\n# include <emscripten.h>\n#endif\n\n#include \"crypto_stream_chacha20.h\"\n#include \"randombytes.h\"\n#ifdef RANDOMBYTES_DEFAULT_IMPLEMENTATION\n# include \"randombytes_default.h\"\n#else\n# ifdef __native_client__\n#  include \"randombytes_nativeclient.h\"\n# else\n#  include \"randombytes_sysrandom.h\"\n# endif\n#endif\n#include \"private/common.h\"\n\n/* C++Builder defines a \"random\" macro */\n#undef random\n\nstatic const randombytes_implementation *implementation;\n\n#ifndef RANDOMBYTES_DEFAULT_IMPLEMENTATION\n# ifdef __EMSCRIPTEN__\n#  define RANDOMBYTES_DEFAULT_IMPLEMENTATION NULL\n# else\n#  ifdef __native_client__\n#   define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_nativeclient_implementation;\n#  else\n#   define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_sysrandom_implementation;\n#  endif\n# endif\n#endif\n\nstatic void\nrandombytes_init_if_needed(void)\n{\n    if (implementation == NULL) {\n        implementation = RANDOMBYTES_DEFAULT_IMPLEMENTATION;\n        randombytes_stir();\n    }\n}\n\nint\nrandombytes_set_implementation(randombytes_implementation *impl)\n{\n    implementation = impl;\n\n    return 0;\n}\n\nconst char *\nrandombytes_implementation_name(void)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    return implementation->implementation_name();\n#else\n    return \"js\";\n#endif\n}\n\nuint32_t\nrandombytes_random(void)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    return implementation->random();\n#else\n    return EM_ASM_INT_V({\n        return Module.getRandomValue();\n    });\n#endif\n}\n\nvoid\nrandombytes_stir(void)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    if (implementation->stir != NULL) {\n        implementation->stir();\n    }\n#else\n    EM_ASM({\n        if (Module.getRandomValue === undefined) {\n            try {\n                var window_ = \"object\" === typeof window ? window : self,\n                    crypto_ = typeof window_.crypto !== \"undefined\" ? window_.crypto : window_.msCrypto,\n                    randomValuesStandard = function() {\n                        var buf = new Uint32Array(1);\n                        crypto_.getRandomValues(buf);\n                        return buf[0] >>> 0;\n                    };\n                randomValuesStandard();\n                Module.getRandomValue = randomValuesStandard;\n            } catch (e) {\n                try {\n                    var crypto = require('crypto'),\n                        randomValueNodeJS = function() {\n                            var buf = crypto.randomBytes(4);\n                            return (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3]) >>> 0;\n                        };\n                    randomValueNodeJS();\n                    Module.getRandomValue = randomValueNodeJS;\n                } catch (e) {\n                    throw 'No secure random number generator found';\n                }\n            }\n        }\n    });\n#endif\n}\n\nuint32_t\nrandombytes_uniform(const uint32_t upper_bound)\n{\n    uint32_t min;\n    uint32_t r;\n\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    if (implementation->uniform != NULL) {\n        return implementation->uniform(upper_bound);\n    }\n#endif\n    if (upper_bound < 2) {\n        return 0;\n    }\n    min = (1U + ~upper_bound) % upper_bound;\n    do {\n        r = randombytes_random();\n    } while (r < min);\n\n    return r % upper_bound;\n}\n\nvoid\nrandombytes_buf(void * const buf, const size_t size)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    if (size > (size_t) 0U) {\n        implementation->buf(buf, size);\n    }\n#else\n    unsigned char *p = (unsigned char *) buf;\n    size_t         i;\n\n    for (i = (size_t) 0U; i < size; i++) {\n        p[i] = (unsigned char) randombytes_random();\n    }\n#endif\n}\n\nvoid\nrandombytes_buf_deterministic(void * const buf, const size_t size,\n                              const unsigned char seed[randombytes_SEEDBYTES])\n{\n    static const unsigned char nonce[crypto_stream_chacha20_ietf_NONCEBYTES] = {\n        'L', 'i', 'b', 's', 'o', 'd', 'i', 'u', 'm', 'D', 'R', 'G'\n    };\n\n    COMPILER_ASSERT(randombytes_SEEDBYTES == crypto_stream_chacha20_ietf_KEYBYTES);\n#if SIZE_MAX > 0x4000000000ULL\n    if (size > 0x4000000000ULL) {\n        abort();\n    }\n#endif\n    crypto_stream_chacha20_ietf((unsigned char *) buf, (unsigned long long) size,\n                                nonce, seed);\n}\n\nsize_t\nrandombytes_seedbytes(void)\n{\n    return randombytes_SEEDBYTES;\n}\n\nint\nrandombytes_close(void)\n{\n    if (implementation != NULL && implementation->close != NULL) {\n        return implementation->close();\n    }\n    return 0;\n}\n\nvoid\nrandombytes(unsigned char * const buf, const unsigned long long buf_len)\n{\n    assert(buf_len <= SIZE_MAX);\n    randombytes_buf(buf, (size_t) buf_len);\n}\n","#ifndef __STDC_WANT_LIB_EXT1__\n# define __STDC_WANT_LIB_EXT1__ 1\n#endif\n#include <assert.h>\n#include <errno.h>\n#include <limits.h>\n#include <signal.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n#ifdef HAVE_SYS_MMAN_H\n# include <sys/mman.h>\n#endif\n\n#ifdef _WIN32\n# include <windows.h>\n# include <wincrypt.h>\n#else\n# include <unistd.h>\n#endif\n\n#include \"randombytes.h\"\n#include \"utils.h\"\n\n#ifndef ENOSYS\n# define ENOSYS ENXIO\n#endif\n\n#if defined(_WIN32) && \\\n    (!defined(WINAPI_FAMILY) || WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)\n# define WINAPI_DESKTOP\n#endif\n\n#define CANARY_SIZE 16U\n#define GARBAGE_VALUE 0xdb\n\n#ifndef MAP_NOCORE\n# define MAP_NOCORE 0\n#endif\n#if !defined(MAP_ANON) && defined(MAP_ANONYMOUS)\n# define MAP_ANON MAP_ANONYMOUS\n#endif\n#if defined(WINAPI_DESKTOP) || (defined(MAP_ANON) && defined(HAVE_MMAP)) || \\\n    defined(HAVE_POSIX_MEMALIGN)\n# define HAVE_ALIGNED_MALLOC\n#endif\n#if defined(HAVE_MPROTECT) && \\\n    !(defined(PROT_NONE) && defined(PROT_READ) && defined(PROT_WRITE))\n# undef HAVE_MPROTECT\n#endif\n#if defined(HAVE_ALIGNED_MALLOC) && \\\n    (defined(WINAPI_DESKTOP) || defined(HAVE_MPROTECT))\n# define HAVE_PAGE_PROTECTION\n#endif\n#if !defined(MADV_DODUMP) && defined(MADV_CORE)\n# define MADV_DODUMP   MADV_CORE\n# define MADV_DONTDUMP MADV_NOCORE\n#endif\n\nstatic size_t        page_size;\nstatic unsigned char canary[CANARY_SIZE];\n\n#ifdef HAVE_WEAK_SYMBOLS\n__attribute__((weak)) void\n_sodium_memzero_as_a_weak_symbol_to_prevent_lto(void *const  pnt,\n                                                const size_t len)\n{\n    unsigned char *pnt_ = (unsigned char *) pnt;\n    size_t         i    = (size_t) 0U;\n\n    while (i < len) {\n        pnt_[i++] = 0U;\n    }\n}\n#endif\n\nvoid\nsodium_memzero(void *const pnt, const size_t len)\n{\n#ifdef _WIN32\n    SecureZeroMemory(pnt, len);\n#elif defined(HAVE_MEMSET_S)\n    if (len > 0U && memset_s(pnt, (rsize_t) len, 0, (rsize_t) len) != 0) {\n        abort(); /* LCOV_EXCL_LINE */\n    }\n#elif defined(HAVE_EXPLICIT_BZERO)\n    explicit_bzero(pnt, len);\n#elif HAVE_WEAK_SYMBOLS\n    _sodium_memzero_as_a_weak_symbol_to_prevent_lto(pnt, len);\n#else\n    volatile unsigned char *volatile pnt_ =\n        (volatile unsigned char *volatile) pnt;\n    size_t i = (size_t) 0U;\n\n    while (i < len) {\n        pnt_[i++] = 0U;\n    }\n#endif\n}\n\n#ifdef HAVE_WEAK_SYMBOLS\n__attribute__((weak)) void\n_sodium_dummy_symbol_to_prevent_memcmp_lto(const unsigned char *b1,\n                                           const unsigned char *b2,\n                                           const size_t         len)\n{\n    (void) b1;\n    (void) b2;\n    (void) len;\n}\n#endif\n\nint\nsodium_memcmp(const void *const b1_, const void *const b2_, size_t len)\n{\n#ifdef HAVE_WEAK_SYMBOLS\n    const unsigned char *b1 = (const unsigned char *) b1_;\n    const unsigned char *b2 = (const unsigned char *) b2_;\n#else\n    const volatile unsigned char *volatile b1 =\n        (const volatile unsigned char *volatile) b1_;\n    const volatile unsigned char *volatile b2 =\n        (const volatile unsigned char *volatile) b2_;\n#endif\n    size_t        i;\n    unsigned char d = (unsigned char) 0U;\n\n#if HAVE_WEAK_SYMBOLS\n    _sodium_dummy_symbol_to_prevent_memcmp_lto(b1, b2, len);\n#endif\n    for (i = 0U; i < len; i++) {\n        d |= b1[i] ^ b2[i];\n    }\n    return (1 & ((d - 1) >> 8)) - 1;\n}\n\n#ifdef HAVE_WEAK_SYMBOLS\n__attribute__((weak)) void\n_sodium_dummy_symbol_to_prevent_compare_lto(const unsigned char *b1,\n                                            const unsigned char *b2,\n                                            const size_t         len)\n{\n    (void) b1;\n    (void) b2;\n    (void) len;\n}\n#endif\n\nint\nsodium_compare(const unsigned char *b1_, const unsigned char *b2_, size_t len)\n{\n#ifdef HAVE_WEAK_SYMBOLS\n    const unsigned char *b1 = b1_;\n    const unsigned char *b2 = b2_;\n#else\n    const volatile unsigned char *volatile b1 =\n        (const volatile unsigned char *volatile) b1_;\n    const volatile unsigned char *volatile b2 =\n        (const volatile unsigned char *volatile) b2_;\n#endif\n    unsigned char gt = 0U;\n    unsigned char eq = 1U;\n    size_t        i;\n\n#if HAVE_WEAK_SYMBOLS\n    _sodium_dummy_symbol_to_prevent_compare_lto(b1, b2, len);\n#endif\n    i = len;\n    while (i != 0U) {\n        i--;\n        gt |= ((b2[i] - b1[i]) >> 8) & eq;\n        eq &= ((b2[i] ^ b1[i]) - 1) >> 8;\n    }\n    return (int) (gt + gt + eq) - 1;\n}\n\nint\nsodium_is_zero(const unsigned char *n, const size_t nlen)\n{\n    size_t        i;\n    unsigned char d = 0U;\n\n    for (i = 0U; i < nlen; i++) {\n        d |= n[i];\n    }\n    return 1 & ((d - 1) >> 8);\n}\n\nvoid\nsodium_increment(unsigned char *n, const size_t nlen)\n{\n    size_t        i = 0U;\n    uint_fast16_t c = 1U;\n\n#ifdef HAVE_AMD64_ASM\n    uint64_t t64, t64_2;\n    uint32_t t32;\n\n    if (nlen == 12U) {\n        __asm__ __volatile__(\n            \"xorq %[t64], %[t64] \\n\"\n            \"xorl %[t32], %[t32] \\n\"\n            \"stc \\n\"\n            \"adcq %[t64], (%[out]) \\n\"\n            \"adcl %[t32], 8(%[out]) \\n\"\n            : [t64] \"=&r\"(t64), [t32] \"=&r\"(t32)\n            : [out] \"D\"(n)\n            : \"memory\", \"flags\", \"cc\");\n        return;\n    } else if (nlen == 24U) {\n        __asm__ __volatile__(\n            \"movq $1, %[t64] \\n\"\n            \"xorq %[t64_2], %[t64_2] \\n\"\n            \"addq %[t64], (%[out]) \\n\"\n            \"adcq %[t64_2], 8(%[out]) \\n\"\n            \"adcq %[t64_2], 16(%[out]) \\n\"\n            : [t64] \"=&r\"(t64), [t64_2] \"=&r\"(t64_2)\n            : [out] \"D\"(n)\n            : \"memory\", \"flags\", \"cc\");\n        return;\n    } else if (nlen == 8U) {\n        __asm__ __volatile__(\"incq (%[out]) \\n\"\n                             :\n                             : [out] \"D\"(n)\n                             : \"memory\", \"flags\", \"cc\");\n        return;\n    }\n#endif\n    for (; i < nlen; i++) {\n        c += (uint_fast16_t) n[i];\n        n[i] = (unsigned char) c;\n        c >>= 8;\n    }\n}\n\nvoid\nsodium_add(unsigned char *a, const unsigned char *b, const size_t len)\n{\n    size_t        i = 0U;\n    uint_fast16_t c = 0U;\n\n#ifdef HAVE_AMD64_ASM\n    uint64_t t64, t64_2, t64_3;\n    uint32_t t32;\n\n    if (len == 12U) {\n        __asm__ __volatile__(\n            \"movq (%[in]), %[t64] \\n\"\n            \"movl 8(%[in]), %[t32] \\n\"\n            \"addq %[t64], (%[out]) \\n\"\n            \"adcl %[t32], 8(%[out]) \\n\"\n            : [t64] \"=&r\"(t64), [t32] \"=&r\"(t32)\n            : [in] \"S\"(b), [out] \"D\"(a)\n            : \"memory\", \"flags\", \"cc\");\n        return;\n    } else if (len == 24U) {\n        __asm__ __volatile__(\n            \"movq (%[in]), %[t64] \\n\"\n            \"movq 8(%[in]), %[t64_2] \\n\"\n            \"movq 16(%[in]), %[t64_3] \\n\"\n            \"addq %[t64], (%[out]) \\n\"\n            \"adcq %[t64_2], 8(%[out]) \\n\"\n            \"adcq %[t64_3], 16(%[out]) \\n\"\n            : [t64] \"=&r\"(t64), [t64_2] \"=&r\"(t64_2), [t64_3] \"=&r\"(t64_3)\n            : [in] \"S\"(b), [out] \"D\"(a)\n            : \"memory\", \"flags\", \"cc\");\n        return;\n    } else if (len == 8U) {\n        __asm__ __volatile__(\n            \"movq (%[in]), %[t64] \\n\"\n            \"addq %[t64], (%[out]) \\n\"\n            : [t64] \"=&r\"(t64)\n            : [in] \"S\"(b), [out] \"D\"(a)\n            : \"memory\", \"flags\", \"cc\");\n        return;\n    }\n#endif\n    for (; i < len; i++) {\n        c += (uint_fast16_t) a[i] + (uint_fast16_t) b[i];\n        a[i] = (unsigned char) c;\n        c >>= 8;\n    }\n}\n\n/* Derived from original code by CodesInChaos */\nchar *\nsodium_bin2hex(char *const hex, const size_t hex_maxlen,\n               const unsigned char *const bin, const size_t bin_len)\n{\n    size_t       i = (size_t) 0U;\n    unsigned int x;\n    int          b;\n    int          c;\n\n    if (bin_len >= SIZE_MAX / 2 || hex_maxlen <= bin_len * 2U) {\n        abort(); /* LCOV_EXCL_LINE */\n    }\n    while (i < bin_len) {\n        c = bin[i] & 0xf;\n        b = bin[i] >> 4;\n        x = (unsigned char) (87U + c + (((c - 10U) >> 8) & ~38U)) << 8 |\n            (unsigned char) (87U + b + (((b - 10U) >> 8) & ~38U));\n        hex[i * 2U] = (char) x;\n        x >>= 8;\n        hex[i * 2U + 1U] = (char) x;\n        i++;\n    }\n    hex[i * 2U] = 0U;\n\n    return hex;\n}\n\nint\nsodium_hex2bin(unsigned char *const bin, const size_t bin_maxlen,\n               const char *const hex, const size_t hex_len,\n               const char *const ignore, size_t *const bin_len,\n               const char **const hex_end)\n{\n    size_t        bin_pos = (size_t) 0U;\n    size_t        hex_pos = (size_t) 0U;\n    int           ret     = 0;\n    unsigned char c;\n    unsigned char c_acc = 0U;\n    unsigned char c_alpha0, c_alpha;\n    unsigned char c_num0, c_num;\n    unsigned char c_val;\n    unsigned char state = 0U;\n\n    while (hex_pos < hex_len) {\n        c        = (unsigned char) hex[hex_pos];\n        c_num    = c ^ 48U;\n        c_num0   = (c_num - 10U) >> 8;\n        c_alpha  = (c & ~32U) - 55U;\n        c_alpha0 = ((c_alpha - 10U) ^ (c_alpha - 16U)) >> 8;\n        if ((c_num0 | c_alpha0) == 0U) {\n            if (ignore != NULL && state == 0U && strchr(ignore, c) != NULL) {\n                hex_pos++;\n                continue;\n            }\n            break;\n        }\n        c_val = (c_num0 & c_num) | (c_alpha0 & c_alpha);\n        if (bin_pos >= bin_maxlen) {\n            ret   = -1;\n            errno = ERANGE;\n            break;\n        }\n        if (state == 0U) {\n            c_acc = c_val * 16U;\n        } else {\n            bin[bin_pos++] = c_acc | c_val;\n        }\n        state = ~state;\n        hex_pos++;\n    }\n    if (state != 0U) {\n        hex_pos--;\n    }\n    if (hex_end != NULL) {\n        *hex_end = &hex[hex_pos];\n    }\n    if (bin_len != NULL) {\n        *bin_len = bin_pos;\n    }\n    return ret;\n}\n\nint\n_sodium_alloc_init(void)\n{\n#ifdef HAVE_ALIGNED_MALLOC\n# if defined(_SC_PAGESIZE)\n    long page_size_ = sysconf(_SC_PAGESIZE);\n    if (page_size_ > 0L) {\n        page_size = (size_t) page_size_;\n    }\n# elif defined(WINAPI_DESKTOP)\n    SYSTEM_INFO si;\n    GetSystemInfo(&si);\n    page_size = (size_t) si.dwPageSize;\n# endif\n    if (page_size < CANARY_SIZE || page_size < sizeof(size_t)) {\n        abort(); /* LCOV_EXCL_LINE */\n    }\n#endif\n    randombytes_buf(canary, sizeof canary);\n\n    return 0;\n}\n\nint\nsodium_mlock(void *const addr, const size_t len)\n{\n#if defined(MADV_DONTDUMP) && defined(HAVE_MADVISE)\n    (void) madvise(addr, len, MADV_DONTDUMP);\n#endif\n#ifdef HAVE_MLOCK\n    return mlock(addr, len);\n#elif defined(WINAPI_DESKTOP)\n    return -(VirtualLock(addr, len) == 0);\n#else\n    errno = ENOSYS;\n    return -1;\n#endif\n}\n\nint\nsodium_munlock(void *const addr, const size_t len)\n{\n    sodium_memzero(addr, len);\n#if defined(MADV_DODUMP) && defined(HAVE_MADVISE)\n    (void) madvise(addr, len, MADV_DODUMP);\n#endif\n#ifdef HAVE_MLOCK\n    return munlock(addr, len);\n#elif defined(WINAPI_DESKTOP)\n    return -(VirtualUnlock(addr, len) == 0);\n#else\n    errno = ENOSYS;\n    return -1;\n#endif\n}\n\nstatic int\n_mprotect_noaccess(void *ptr, size_t size)\n{\n#ifdef HAVE_MPROTECT\n    return mprotect(ptr, size, PROT_NONE);\n#elif defined(WINAPI_DESKTOP)\n    DWORD old;\n    return -(VirtualProtect(ptr, size, PAGE_NOACCESS, &old) == 0);\n#else\n    errno = ENOSYS;\n    return -1;\n#endif\n}\n\nstatic int\n_mprotect_readonly(void *ptr, size_t size)\n{\n#ifdef HAVE_MPROTECT\n    return mprotect(ptr, size, PROT_READ);\n#elif defined(WINAPI_DESKTOP)\n    DWORD old;\n    return -(VirtualProtect(ptr, size, PAGE_READONLY, &old) == 0);\n#else\n    errno = ENOSYS;\n    return -1;\n#endif\n}\n\nstatic int\n_mprotect_readwrite(void *ptr, size_t size)\n{\n#ifdef HAVE_MPROTECT\n    return mprotect(ptr, size, PROT_READ | PROT_WRITE);\n#elif defined(WINAPI_DESKTOP)\n    DWORD old;\n    return -(VirtualProtect(ptr, size, PAGE_READWRITE, &old) == 0);\n#else\n    errno = ENOSYS;\n    return -1;\n#endif\n}\n\n#ifdef HAVE_ALIGNED_MALLOC\n\n__attribute__((noreturn)) static void\n_out_of_bounds(void)\n{\n# ifdef SIGSEGV\n    raise(SIGSEGV);\n# elif defined(SIGKILL)\n    raise(SIGKILL);\n# endif\n    abort();\n} /* LCOV_EXCL_LINE */\n\nstatic inline size_t\n_page_round(const size_t size)\n{\n    const size_t page_mask = page_size - 1U;\n\n    return (size + page_mask) & ~page_mask;\n}\n\nstatic __attribute__((malloc)) unsigned char *\n_alloc_aligned(const size_t size)\n{\n    void *ptr;\n\n# if defined(MAP_ANON) && defined(HAVE_MMAP)\n    if ((ptr = mmap(NULL, size, PROT_READ | PROT_WRITE,\n                    MAP_ANON | MAP_PRIVATE | MAP_NOCORE, -1, 0)) ==\n        MAP_FAILED) {\n        ptr = NULL; /* LCOV_EXCL_LINE */\n    }               /* LCOV_EXCL_LINE */\n# elif defined(HAVE_POSIX_MEMALIGN)\n    if (posix_memalign(&ptr, page_size, size) != 0) {\n        ptr = NULL; /* LCOV_EXCL_LINE */\n    }               /* LCOV_EXCL_LINE */\n# elif defined(WINAPI_DESKTOP)\n    ptr = VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\n# else\n#  error Bug\n# endif\n    return (unsigned char *) ptr;\n}\n\nstatic void\n_free_aligned(unsigned char *const ptr, const size_t size)\n{\n# if defined(MAP_ANON) && defined(HAVE_MMAP)\n    (void) munmap(ptr, size);\n# elif defined(HAVE_POSIX_MEMALIGN)\n    free(ptr);\n# elif defined(WINAPI_DESKTOP)\n    VirtualFree(ptr, 0U, MEM_RELEASE);\n# else\n#  error Bug\n#endif\n}\n\nstatic unsigned char *\n_unprotected_ptr_from_user_ptr(void *const ptr)\n{\n    uintptr_t      unprotected_ptr_u;\n    unsigned char *canary_ptr;\n    size_t         page_mask;\n\n    canary_ptr = ((unsigned char *) ptr) - sizeof canary;\n    page_mask = page_size - 1U;\n    unprotected_ptr_u = ((uintptr_t) canary_ptr & (uintptr_t) ~page_mask);\n    if (unprotected_ptr_u <= page_size * 2U) {\n        abort(); /* LCOV_EXCL_LINE */\n    }\n    return (unsigned char *) unprotected_ptr_u;\n}\n\n#endif /* HAVE_ALIGNED_MALLOC */\n\n#ifndef HAVE_ALIGNED_MALLOC\nstatic __attribute__((malloc)) void *\n_sodium_malloc(const size_t size)\n{\n    return malloc(size > (size_t) 0U ? size : (size_t) 1U);\n}\n#else\nstatic __attribute__((malloc)) void *\n_sodium_malloc(const size_t size)\n{\n    void          *user_ptr;\n    unsigned char *base_ptr;\n    unsigned char *canary_ptr;\n    unsigned char *unprotected_ptr;\n    size_t         size_with_canary;\n    size_t         total_size;\n    size_t         unprotected_size;\n\n    if (size >= (size_t) SIZE_MAX - page_size * 4U) {\n        errno = ENOMEM;\n        return NULL;\n    }\n    if (page_size <= sizeof canary || page_size < sizeof unprotected_size) {\n        abort(); /* LCOV_EXCL_LINE */\n    }\n    size_with_canary = (sizeof canary) + size;\n    unprotected_size = _page_round(size_with_canary);\n    total_size       = page_size + page_size + unprotected_size + page_size;\n    if ((base_ptr = _alloc_aligned(total_size)) == NULL) {\n        return NULL; /* LCOV_EXCL_LINE */\n    }\n    unprotected_ptr = base_ptr + page_size * 2U;\n    _mprotect_noaccess(base_ptr + page_size, page_size);\n# ifndef HAVE_PAGE_PROTECTION\n    memcpy(unprotected_ptr + unprotected_size, canary, sizeof canary);\n# endif\n    _mprotect_noaccess(unprotected_ptr + unprotected_size, page_size);\n    sodium_mlock(unprotected_ptr, unprotected_size);\n    canary_ptr =\n        unprotected_ptr + _page_round(size_with_canary) - size_with_canary;\n    user_ptr = canary_ptr + sizeof canary;\n    memcpy(canary_ptr, canary, sizeof canary);\n    memcpy(base_ptr, &unprotected_size, sizeof unprotected_size);\n    _mprotect_readonly(base_ptr, page_size);\n    assert(_unprotected_ptr_from_user_ptr(user_ptr) == unprotected_ptr);\n\n    return user_ptr;\n}\n#endif /* !HAVE_ALIGNED_MALLOC */\n\n__attribute__((malloc)) void *\nsodium_malloc(const size_t size)\n{\n    void *ptr;\n\n    if ((ptr = _sodium_malloc(size)) == NULL) {\n        return NULL;\n    }\n    memset(ptr, (int) GARBAGE_VALUE, size);\n\n    return ptr;\n}\n\n__attribute__((malloc)) void *\nsodium_allocarray(size_t count, size_t size)\n{\n    size_t total_size;\n\n    if (count > (size_t) 0U && size >= (size_t) SIZE_MAX / count) {\n        errno = ENOMEM;\n        return NULL;\n    }\n    total_size = count * size;\n\n    return sodium_malloc(total_size);\n}\n\n#ifndef HAVE_ALIGNED_MALLOC\nvoid\nsodium_free(void *ptr)\n{\n    free(ptr);\n}\n#else\nvoid\nsodium_free(void *ptr)\n{\n    unsigned char *base_ptr;\n    unsigned char *canary_ptr;\n    unsigned char *unprotected_ptr;\n    size_t         total_size;\n    size_t         unprotected_size;\n\n    if (ptr == NULL) {\n        return;\n    }\n    canary_ptr      = ((unsigned char *) ptr) - sizeof canary;\n    unprotected_ptr = _unprotected_ptr_from_user_ptr(ptr);\n    base_ptr        = unprotected_ptr - page_size * 2U;\n    memcpy(&unprotected_size, base_ptr, sizeof unprotected_size);\n    total_size = page_size + page_size + unprotected_size + page_size;\n    _mprotect_readwrite(base_ptr, total_size);\n    if (sodium_memcmp(canary_ptr, canary, sizeof canary) != 0) {\n        _out_of_bounds();\n    }\n# ifndef HAVE_PAGE_PROTECTION\n    if (sodium_memcmp(unprotected_ptr + unprotected_size, canary,\n                      sizeof canary) != 0) {\n        _out_of_bounds();\n    }\n# endif\n    sodium_munlock(unprotected_ptr, unprotected_size);\n    _free_aligned(base_ptr, total_size);\n}\n#endif /* HAVE_ALIGNED_MALLOC */\n\n#ifndef HAVE_PAGE_PROTECTION\nstatic int\n_sodium_mprotect(void *ptr, int (*cb)(void *ptr, size_t size))\n{\n    (void) ptr;\n    (void) cb;\n    errno = ENOSYS;\n    return -1;\n}\n#else\nstatic int\n_sodium_mprotect(void *ptr, int (*cb)(void *ptr, size_t size))\n{\n    unsigned char *base_ptr;\n    unsigned char *unprotected_ptr;\n    size_t         unprotected_size;\n\n    unprotected_ptr = _unprotected_ptr_from_user_ptr(ptr);\n    base_ptr        = unprotected_ptr - page_size * 2U;\n    memcpy(&unprotected_size, base_ptr, sizeof unprotected_size);\n\n    return cb(unprotected_ptr, unprotected_size);\n}\n#endif\n\nint\nsodium_mprotect_noaccess(void *ptr)\n{\n    return _sodium_mprotect(ptr, _mprotect_noaccess);\n}\n\nint\nsodium_mprotect_readonly(void *ptr)\n{\n    return _sodium_mprotect(ptr, _mprotect_readonly);\n}\n\nint\nsodium_mprotect_readwrite(void *ptr)\n{\n    return _sodium_mprotect(ptr, _mprotect_readwrite);\n}\n","\n#include <stdint.h>\n#include <stdlib.h>\n\n#include \"crypto_core_salsa20.h\"\n#include \"crypto_core_salsa2012.h\"\n#include \"crypto_core_salsa208.h\"\n#include \"private/common.h\"\n\nstatic void\ncrypto_core_salsa(unsigned char *out, const unsigned char *in,\n                  const unsigned char *k, const unsigned char *c,\n                  const int rounds)\n{\n    uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14,\n        x15;\n    uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14,\n        j15;\n    int i;\n\n    j0  = x0  = 0x61707865;\n    j5  = x5  = 0x3320646e;\n    j10 = x10 = 0x79622d32;\n    j15 = x15 = 0x6b206574;\n    if (c != NULL) {\n        j0  = x0  = LOAD32_LE(c + 0);\n        j5  = x5  = LOAD32_LE(c + 4);\n        j10 = x10 = LOAD32_LE(c + 8);\n        j15 = x15 = LOAD32_LE(c + 12);\n    }\n    j1  = x1  = LOAD32_LE(k + 0);\n    j2  = x2  = LOAD32_LE(k + 4);\n    j3  = x3  = LOAD32_LE(k + 8);\n    j4  = x4  = LOAD32_LE(k + 12);\n    j11 = x11 = LOAD32_LE(k + 16);\n    j12 = x12 = LOAD32_LE(k + 20);\n    j13 = x13 = LOAD32_LE(k + 24);\n    j14 = x14 = LOAD32_LE(k + 28);\n\n    j6  = x6  = LOAD32_LE(in + 0);\n    j7  = x7  = LOAD32_LE(in + 4);\n    j8  = x8  = LOAD32_LE(in + 8);\n    j9  = x9  = LOAD32_LE(in + 12);\n\n    for (i = 0; i < rounds; i += 2) {\n        x4  ^= ROTL32(x0  + x12, 7);\n        x8  ^= ROTL32(x4  + x0, 9);\n        x12 ^= ROTL32(x8  + x4, 13);\n        x0  ^= ROTL32(x12 + x8, 18);\n        x9  ^= ROTL32(x5  + x1, 7);\n        x13 ^= ROTL32(x9  + x5, 9);\n        x1  ^= ROTL32(x13 + x9, 13);\n        x5  ^= ROTL32(x1  + x13, 18);\n        x14 ^= ROTL32(x10 + x6, 7);\n        x2  ^= ROTL32(x14 + x10, 9);\n        x6  ^= ROTL32(x2  + x14, 13);\n        x10 ^= ROTL32(x6  + x2, 18);\n        x3  ^= ROTL32(x15 + x11, 7);\n        x7  ^= ROTL32(x3  + x15, 9);\n        x11 ^= ROTL32(x7  + x3, 13);\n        x15 ^= ROTL32(x11 + x7, 18);\n        x1  ^= ROTL32(x0  + x3, 7);\n        x2  ^= ROTL32(x1  + x0, 9);\n        x3  ^= ROTL32(x2  + x1, 13);\n        x0  ^= ROTL32(x3  + x2, 18);\n        x6  ^= ROTL32(x5  + x4, 7);\n        x7  ^= ROTL32(x6  + x5, 9);\n        x4  ^= ROTL32(x7  + x6, 13);\n        x5  ^= ROTL32(x4  + x7, 18);\n        x11 ^= ROTL32(x10 + x9, 7);\n        x8  ^= ROTL32(x11 + x10, 9);\n        x9  ^= ROTL32(x8  + x11, 13);\n        x10 ^= ROTL32(x9  + x8, 18);\n        x12 ^= ROTL32(x15 + x14, 7);\n        x13 ^= ROTL32(x12 + x15, 9);\n        x14 ^= ROTL32(x13 + x12, 13);\n        x15 ^= ROTL32(x14 + x13, 18);\n    }\n    STORE32_LE(out + 0,  x0  + j0);\n    STORE32_LE(out + 4,  x1  + j1);\n    STORE32_LE(out + 8,  x2  + j2);\n    STORE32_LE(out + 12, x3  + j3);\n    STORE32_LE(out + 16, x4  + j4);\n    STORE32_LE(out + 20, x5  + j5);\n    STORE32_LE(out + 24, x6  + j6);\n    STORE32_LE(out + 28, x7  + j7);\n    STORE32_LE(out + 32, x8  + j8);\n    STORE32_LE(out + 36, x9  + j9);\n    STORE32_LE(out + 40, x10 + j10);\n    STORE32_LE(out + 44, x11 + j11);\n    STORE32_LE(out + 48, x12 + j12);\n    STORE32_LE(out + 52, x13 + j13);\n    STORE32_LE(out + 56, x14 + j14);\n    STORE32_LE(out + 60, x15 + j15);\n}\n\nint\ncrypto_core_salsa20(unsigned char *out, const unsigned char *in,\n                    const unsigned char *k, const unsigned char *c)\n{\n    crypto_core_salsa(out, in, k, c, 20);\n    return 0;\n}\n\nsize_t\ncrypto_core_salsa20_outputbytes(void)\n{\n    return crypto_core_salsa20_OUTPUTBYTES;\n}\n\nsize_t\ncrypto_core_salsa20_inputbytes(void)\n{\n    return crypto_core_salsa20_INPUTBYTES;\n}\n\nsize_t\ncrypto_core_salsa20_keybytes(void)\n{\n    return crypto_core_salsa20_KEYBYTES;\n}\n\nsize_t\ncrypto_core_salsa20_constbytes(void)\n{\n    return crypto_core_salsa20_CONSTBYTES;\n}\n\n#ifndef MINIMAL\n\nint\ncrypto_core_salsa2012(unsigned char *out, const unsigned char *in,\n                      const unsigned char *k, const unsigned char *c)\n{\n    crypto_core_salsa(out, in, k, c, 12);\n    return 0;\n}\n\nsize_t\ncrypto_core_salsa2012_outputbytes(void)\n{\n    return crypto_core_salsa2012_OUTPUTBYTES;\n}\n\nsize_t\ncrypto_core_salsa2012_inputbytes(void)\n{\n    return crypto_core_salsa2012_INPUTBYTES;\n}\n\nsize_t\ncrypto_core_salsa2012_keybytes(void)\n{\n    return crypto_core_salsa2012_KEYBYTES;\n}\n\nsize_t\ncrypto_core_salsa2012_constbytes(void)\n{\n    return crypto_core_salsa2012_CONSTBYTES;\n}\n\nint\ncrypto_core_salsa208(unsigned char *out, const unsigned char *in,\n                     const unsigned char *k, const unsigned char *c)\n{\n    crypto_core_salsa(out, in, k, c, 8);\n    return 0;\n}\n\nsize_t\ncrypto_core_salsa208_outputbytes(void)\n{\n    return crypto_core_salsa208_OUTPUTBYTES;\n}\n\nsize_t\ncrypto_core_salsa208_inputbytes(void)\n{\n    return crypto_core_salsa208_INPUTBYTES;\n}\n\nsize_t\ncrypto_core_salsa208_keybytes(void)\n{\n    return crypto_core_salsa208_KEYBYTES;\n}\n\nsize_t\ncrypto_core_salsa208_constbytes(void)\n{\n    return crypto_core_salsa208_CONSTBYTES;\n}\n\n#endif\n","#ifndef common_H\n#define common_H 1\n\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define COMPILER_ASSERT(X) (void) sizeof(char[(X) ? 1 : -1])\n\n#define ROTL32(X, B) rotl32((X), (B))\nstatic inline uint32_t\nrotl32(const uint32_t x, const int b)\n{\n    return (x << b) | (x >> (32 - b));\n}\n\n#define ROTL64(X, B) rotl64((X), (B))\nstatic inline uint64_t\nrotl64(const uint64_t x, const int b)\n{\n    return (x << b) | (x >> (64 - b));\n}\n\n#define ROTR32(X, B) rotr32((X), (B))\nstatic inline uint32_t\nrotr32(const uint32_t x, const int b)\n{\n    return (x >> b) | (x << (32 - b));\n}\n\n#define ROTR64(X, B) rotr64((X), (B))\nstatic inline uint64_t\nrotr64(const uint64_t x, const int b)\n{\n    return (x >> b) | (x << (64 - b));\n}\n\n#define LOAD64_LE(SRC) load64_le(SRC)\nstatic inline uint64_t\nload64_le(const uint8_t src[8])\n{\n#ifdef NATIVE_LITTLE_ENDIAN\n    uint64_t w;\n    memcpy(&w, src, sizeof w);\n    return w;\n#else\n    uint64_t w = (uint64_t) src[0];\n    w |= (uint64_t) src[1] <<  8;\n    w |= (uint64_t) src[2] << 16;\n    w |= (uint64_t) src[3] << 24;\n    w |= (uint64_t) src[4] << 32;\n    w |= (uint64_t) src[5] << 40;\n    w |= (uint64_t) src[6] << 48;\n    w |= (uint64_t) src[7] << 56;\n    return w;\n#endif\n}\n\n#define STORE64_LE(DST, W) store64_le((DST), (W))\nstatic inline void\nstore64_le(uint8_t dst[8], uint64_t w)\n{\n#ifdef NATIVE_LITTLE_ENDIAN\n    memcpy(dst, &w, sizeof w);\n#else\n    dst[0] = (uint8_t) w; w >>= 8;\n    dst[1] = (uint8_t) w; w >>= 8;\n    dst[2] = (uint8_t) w; w >>= 8;\n    dst[3] = (uint8_t) w; w >>= 8;\n    dst[4] = (uint8_t) w; w >>= 8;\n    dst[5] = (uint8_t) w; w >>= 8;\n    dst[6] = (uint8_t) w; w >>= 8;\n    dst[7] = (uint8_t) w;\n#endif\n}\n\n#define LOAD32_LE(SRC) load32_le(SRC)\nstatic inline uint32_t\nload32_le(const uint8_t src[4])\n{\n#ifdef NATIVE_LITTLE_ENDIAN\n    uint32_t w;\n    memcpy(&w, src, sizeof w);\n    return w;\n#else\n    uint32_t w = (uint32_t) src[0];\n    w |= (uint32_t) src[1] <<  8;\n    w |= (uint32_t) src[2] << 16;\n    w |= (uint32_t) src[3] << 24;\n    return w;\n#endif\n}\n\n#define STORE32_LE(DST, W) store32_le((DST), (W))\nstatic inline void\nstore32_le(uint8_t dst[4], uint32_t w)\n{\n#ifdef NATIVE_LITTLE_ENDIAN\n    memcpy(dst, &w, sizeof w);\n#else\n    dst[0] = (uint8_t) w; w >>= 8;\n    dst[1] = (uint8_t) w; w >>= 8;\n    dst[2] = (uint8_t) w; w >>= 8;\n    dst[3] = (uint8_t) w;\n#endif\n}\n\n/* ----- */\n\n#define LOAD64_BE(SRC) load64_be(SRC)\nstatic inline uint64_t\nload64_be(const uint8_t src[8])\n{\n#ifdef NATIVE_BIG_ENDIAN\n    uint64_t w;\n    memcpy(&w, src, sizeof w);\n    return w;\n#else\n    uint64_t w = (uint64_t) src[7];\n    w |= (uint64_t) src[6] <<  8;\n    w |= (uint64_t) src[5] << 16;\n    w |= (uint64_t) src[4] << 24;\n    w |= (uint64_t) src[3] << 32;\n    w |= (uint64_t) src[2] << 40;\n    w |= (uint64_t) src[1] << 48;\n    w |= (uint64_t) src[0] << 56;\n    return w;\n#endif\n}\n\n#define STORE64_BE(DST, W) store64_be((DST), (W))\nstatic inline void\nstore64_be(uint8_t dst[8], uint64_t w)\n{\n#ifdef NATIVE_BIG_ENDIAN\n    memcpy(dst, &w, sizeof w);\n#else\n    dst[7] = (uint8_t) w; w >>= 8;\n    dst[6] = (uint8_t) w; w >>= 8;\n    dst[5] = (uint8_t) w; w >>= 8;\n    dst[4] = (uint8_t) w; w >>= 8;\n    dst[3] = (uint8_t) w; w >>= 8;\n    dst[2] = (uint8_t) w; w >>= 8;\n    dst[1] = (uint8_t) w; w >>= 8;\n    dst[0] = (uint8_t) w;\n#endif\n}\n\n#define LOAD32_BE(SRC) load32_be(SRC)\nstatic inline uint32_t\nload32_be(const uint8_t src[4])\n{\n#ifdef NATIVE_BIG_ENDIAN\n    uint32_t w;\n    memcpy(&w, src, sizeof w);\n    return w;\n#else\n    uint32_t w = (uint32_t) src[3];\n    w |= (uint32_t) src[2] <<  8;\n    w |= (uint32_t) src[1] << 16;\n    w |= (uint32_t) src[0] << 24;\n    return w;\n#endif\n}\n\n#define STORE32_BE(DST, W) store32_be((DST), (W))\nstatic inline void\nstore32_be(uint8_t dst[4], uint32_t w)\n{\n#ifdef NATIVE_BIG_ENDIAN\n    memcpy(dst, &w, sizeof w);\n#else\n    dst[3] = (uint8_t) w; w >>= 8;\n    dst[2] = (uint8_t) w; w >>= 8;\n    dst[1] = (uint8_t) w; w >>= 8;\n    dst[0] = (uint8_t) w;\n#endif\n}\n\n#ifndef __GNUC__\n# ifdef __attribute__\n#  undef __attribute__\n# endif\n# define __attribute__(a)\n#endif\n\n#ifndef CRYPTO_ALIGN\n# if defined(__INTEL_COMPILER) || defined(_MSC_VER)\n#  define CRYPTO_ALIGN(x) __declspec(align(x))\n# else\n#  define CRYPTO_ALIGN(x) __attribute__ ((aligned(x)))\n# endif\n#endif\n\n#if defined(_MSC_VER) && \\\n    (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86))\n\n# include <intrin.h>\n\n# define HAVE_INTRIN_H    1\n# define HAVE_MMINTRIN_H  1\n# define HAVE_EMMINTRIN_H 1\n# define HAVE_PMMINTRIN_H 1\n# define HAVE_TMMINTRIN_H 1\n# define HAVE_SMMINTRIN_H 1\n# define HAVE_AVXINTRIN_H 1\n# if _MSC_VER >= 1600\n#  define HAVE_WMMINTRIN_H 1\n# endif\n# if _MSC_VER >= 1700 && defined(_M_X64)\n#  define HAVE_AVX2INTRIN_H 1\n# endif\n#elif defined(HAVE_INTRIN_H)\n# include <intrin.h>\n#endif\n\n#endif\n","\n#include \"poly1305_donna.h\"\n#include \"crypto_verify_16.h\"\n#include \"private/common.h\"\n#include \"utils.h\"\n\n#ifdef HAVE_TI_MODE\n#include \"poly1305_donna64.h\"\n#else\n#include \"poly1305_donna32.h\"\n#endif\n#include \"../onetimeauth_poly1305.h\"\n\nstatic void\npoly1305_update(poly1305_state_internal_t *st, const unsigned char *m,\n                unsigned long long bytes)\n{\n    unsigned long long i;\n\n    /* handle leftover */\n    if (st->leftover) {\n        unsigned long long want = (poly1305_block_size - st->leftover);\n\n        if (want > bytes) {\n            want = bytes;\n        }\n        for (i = 0; i < want; i++) {\n            st->buffer[st->leftover + i] = m[i];\n        }\n        bytes -= want;\n        m += want;\n        st->leftover += want;\n        if (st->leftover < poly1305_block_size) {\n            return;\n        }\n        poly1305_blocks(st, st->buffer, poly1305_block_size);\n        st->leftover = 0;\n    }\n\n    /* process full blocks */\n    if (bytes >= poly1305_block_size) {\n        unsigned long long want = (bytes & ~(poly1305_block_size - 1));\n\n        poly1305_blocks(st, m, want);\n        m += want;\n        bytes -= want;\n    }\n\n    /* store leftover */\n    if (bytes) {\n        for (i = 0; i < bytes; i++) {\n            st->buffer[st->leftover + i] = m[i];\n        }\n        st->leftover += bytes;\n    }\n}\n\nstatic int\ncrypto_onetimeauth_poly1305_donna(unsigned char *out, const unsigned char *m,\n                                  unsigned long long   inlen,\n                                  const unsigned char *key)\n{\n    CRYPTO_ALIGN(64) poly1305_state_internal_t state;\n\n    poly1305_init(&state, key);\n    poly1305_update(&state, m, inlen);\n    poly1305_finish(&state, out);\n\n    return 0;\n}\n\nstatic int\ncrypto_onetimeauth_poly1305_donna_init(crypto_onetimeauth_poly1305_state *state,\n                                       const unsigned char *key)\n{\n    COMPILER_ASSERT(sizeof(crypto_onetimeauth_poly1305_state) >=\n        sizeof(poly1305_state_internal_t));\n    poly1305_init((poly1305_state_internal_t *) (void *) state, key);\n\n    return 0;\n}\n\nstatic int\ncrypto_onetimeauth_poly1305_donna_update(\n    crypto_onetimeauth_poly1305_state *state, const unsigned char *in,\n    unsigned long long inlen)\n{\n    poly1305_update((poly1305_state_internal_t *) (void *) state, in, inlen);\n\n    return 0;\n}\n\nstatic int\ncrypto_onetimeauth_poly1305_donna_final(\n    crypto_onetimeauth_poly1305_state *state, unsigned char *out)\n{\n    poly1305_finish((poly1305_state_internal_t *) (void *) state, out);\n\n    return 0;\n}\n\nstatic int\ncrypto_onetimeauth_poly1305_donna_verify(const unsigned char *h,\n                                         const unsigned char *in,\n                                         unsigned long long   inlen,\n                                         const unsigned char *k)\n{\n    unsigned char correct[16];\n\n    crypto_onetimeauth_poly1305_donna(correct, in, inlen, k);\n\n    return crypto_verify_16(h, correct);\n}\n\nstruct crypto_onetimeauth_poly1305_implementation\n    crypto_onetimeauth_poly1305_donna_implementation = {\n        SODIUM_C99(.onetimeauth =) crypto_onetimeauth_poly1305_donna,\n        SODIUM_C99(.onetimeauth_verify =)\n            crypto_onetimeauth_poly1305_donna_verify,\n        SODIUM_C99(.onetimeauth_init =) crypto_onetimeauth_poly1305_donna_init,\n        SODIUM_C99(.onetimeauth_update =)\n            crypto_onetimeauth_poly1305_donna_update,\n        SODIUM_C99(.onetimeauth_final =) crypto_onetimeauth_poly1305_donna_final\n    };\n","/*\n   poly1305 implementation using 32 bit * 32 bit = 64 bit multiplication\n   and 64 bit addition\n*/\n\n#if defined(_MSC_VER)\n# define POLY1305_NOINLINE __declspec(noinline)\n#elif defined(__GNUC__)\n# define POLY1305_NOINLINE __attribute__((noinline))\n#else\n# define POLY1305_NOINLINE\n#endif\n\n#include \"private/common.h\"\n\n#define poly1305_block_size 16\n\n/* 17 + sizeof(unsigned long long) + 14*sizeof(unsigned long) */\ntypedef struct poly1305_state_internal_t {\n    unsigned long      r[5];\n    unsigned long      h[5];\n    unsigned long      pad[4];\n    unsigned long long leftover;\n    unsigned char      buffer[poly1305_block_size];\n    unsigned char      final;\n} poly1305_state_internal_t;\n\nstatic void\npoly1305_init(poly1305_state_internal_t *st, const unsigned char key[32])\n{\n    /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */\n    st->r[0] = (LOAD32_LE(&key[0])) & 0x3ffffff;\n    st->r[1] = (LOAD32_LE(&key[3]) >> 2) & 0x3ffff03;\n    st->r[2] = (LOAD32_LE(&key[6]) >> 4) & 0x3ffc0ff;\n    st->r[3] = (LOAD32_LE(&key[9]) >> 6) & 0x3f03fff;\n    st->r[4] = (LOAD32_LE(&key[12]) >> 8) & 0x00fffff;\n\n    /* h = 0 */\n    st->h[0] = 0;\n    st->h[1] = 0;\n    st->h[2] = 0;\n    st->h[3] = 0;\n    st->h[4] = 0;\n\n    /* save pad for later */\n    st->pad[0] = LOAD32_LE(&key[16]);\n    st->pad[1] = LOAD32_LE(&key[20]);\n    st->pad[2] = LOAD32_LE(&key[24]);\n    st->pad[3] = LOAD32_LE(&key[28]);\n\n    st->leftover = 0;\n    st->final    = 0;\n}\n\nstatic void\npoly1305_blocks(poly1305_state_internal_t *st, const unsigned char *m,\n                unsigned long long bytes)\n{\n    const unsigned long hibit = (st->final) ? 0UL : (1UL << 24); /* 1 << 128 */\n    unsigned long       r0, r1, r2, r3, r4;\n    unsigned long       s1, s2, s3, s4;\n    unsigned long       h0, h1, h2, h3, h4;\n    unsigned long long  d0, d1, d2, d3, d4;\n    unsigned long       c;\n\n    r0 = st->r[0];\n    r1 = st->r[1];\n    r2 = st->r[2];\n    r3 = st->r[3];\n    r4 = st->r[4];\n\n    s1 = r1 * 5;\n    s2 = r2 * 5;\n    s3 = r3 * 5;\n    s4 = r4 * 5;\n\n    h0 = st->h[0];\n    h1 = st->h[1];\n    h2 = st->h[2];\n    h3 = st->h[3];\n    h4 = st->h[4];\n\n    while (bytes >= poly1305_block_size) {\n        /* h += m[i] */\n        h0 += (LOAD32_LE(m + 0)) & 0x3ffffff;\n        h1 += (LOAD32_LE(m + 3) >> 2) & 0x3ffffff;\n        h2 += (LOAD32_LE(m + 6) >> 4) & 0x3ffffff;\n        h3 += (LOAD32_LE(m + 9) >> 6) & 0x3ffffff;\n        h4 += (LOAD32_LE(m + 12) >> 8) | hibit;\n\n        /* h *= r */\n        d0 = ((unsigned long long) h0 * r0) + ((unsigned long long) h1 * s4) +\n             ((unsigned long long) h2 * s3) + ((unsigned long long) h3 * s2) +\n             ((unsigned long long) h4 * s1);\n        d1 = ((unsigned long long) h0 * r1) + ((unsigned long long) h1 * r0) +\n             ((unsigned long long) h2 * s4) + ((unsigned long long) h3 * s3) +\n             ((unsigned long long) h4 * s2);\n        d2 = ((unsigned long long) h0 * r2) + ((unsigned long long) h1 * r1) +\n             ((unsigned long long) h2 * r0) + ((unsigned long long) h3 * s4) +\n             ((unsigned long long) h4 * s3);\n        d3 = ((unsigned long long) h0 * r3) + ((unsigned long long) h1 * r2) +\n             ((unsigned long long) h2 * r1) + ((unsigned long long) h3 * r0) +\n             ((unsigned long long) h4 * s4);\n        d4 = ((unsigned long long) h0 * r4) + ((unsigned long long) h1 * r3) +\n             ((unsigned long long) h2 * r2) + ((unsigned long long) h3 * r1) +\n             ((unsigned long long) h4 * r0);\n\n        /* (partial) h %= p */\n        c  = (unsigned long) (d0 >> 26);\n        h0 = (unsigned long) d0 & 0x3ffffff;\n        d1 += c;\n        c  = (unsigned long) (d1 >> 26);\n        h1 = (unsigned long) d1 & 0x3ffffff;\n        d2 += c;\n        c  = (unsigned long) (d2 >> 26);\n        h2 = (unsigned long) d2 & 0x3ffffff;\n        d3 += c;\n        c  = (unsigned long) (d3 >> 26);\n        h3 = (unsigned long) d3 & 0x3ffffff;\n        d4 += c;\n        c  = (unsigned long) (d4 >> 26);\n        h4 = (unsigned long) d4 & 0x3ffffff;\n        h0 += c * 5;\n        c  = (h0 >> 26);\n        h0 = h0 & 0x3ffffff;\n        h1 += c;\n\n        m += poly1305_block_size;\n        bytes -= poly1305_block_size;\n    }\n\n    st->h[0] = h0;\n    st->h[1] = h1;\n    st->h[2] = h2;\n    st->h[3] = h3;\n    st->h[4] = h4;\n}\n\nstatic POLY1305_NOINLINE void\npoly1305_finish(poly1305_state_internal_t *st, unsigned char mac[16])\n{\n    unsigned long      h0, h1, h2, h3, h4, c;\n    unsigned long      g0, g1, g2, g3, g4;\n    unsigned long long f;\n    unsigned long      mask;\n\n    /* process the remaining block */\n    if (st->leftover) {\n        unsigned long long i = st->leftover;\n\n        st->buffer[i++] = 1;\n        for (; i < poly1305_block_size; i++) {\n            st->buffer[i] = 0;\n        }\n        st->final = 1;\n        poly1305_blocks(st, st->buffer, poly1305_block_size);\n    }\n\n    /* fully carry h */\n    h0 = st->h[0];\n    h1 = st->h[1];\n    h2 = st->h[2];\n    h3 = st->h[3];\n    h4 = st->h[4];\n\n    c  = h1 >> 26;\n    h1 = h1 & 0x3ffffff;\n    h2 += c;\n    c  = h2 >> 26;\n    h2 = h2 & 0x3ffffff;\n    h3 += c;\n    c  = h3 >> 26;\n    h3 = h3 & 0x3ffffff;\n    h4 += c;\n    c  = h4 >> 26;\n    h4 = h4 & 0x3ffffff;\n    h0 += c * 5;\n    c  = h0 >> 26;\n    h0 = h0 & 0x3ffffff;\n    h1 += c;\n\n    /* compute h + -p */\n    g0 = h0 + 5;\n    c  = g0 >> 26;\n    g0 &= 0x3ffffff;\n    g1 = h1 + c;\n    c  = g1 >> 26;\n    g1 &= 0x3ffffff;\n    g2 = h2 + c;\n    c  = g2 >> 26;\n    g2 &= 0x3ffffff;\n    g3 = h3 + c;\n    c  = g3 >> 26;\n    g3 &= 0x3ffffff;\n    g4 = h4 + c - (1UL << 26);\n\n    /* select h if h < p, or h + -p if h >= p */\n    mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;\n    g0 &= mask;\n    g1 &= mask;\n    g2 &= mask;\n    g3 &= mask;\n    g4 &= mask;\n    mask = ~mask;\n\n    h0 = (h0 & mask) | g0;\n    h1 = (h1 & mask) | g1;\n    h2 = (h2 & mask) | g2;\n    h3 = (h3 & mask) | g3;\n    h4 = (h4 & mask) | g4;\n\n    /* h = h % (2^128) */\n    h0 = ((h0) | (h1 << 26)) & 0xffffffff;\n    h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;\n    h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;\n    h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;\n\n    /* mac = (h + pad) % (2^128) */\n    f  = (unsigned long long) h0 + st->pad[0];\n    h0 = (unsigned long) f;\n    f  = (unsigned long long) h1 + st->pad[1] + (f >> 32);\n    h1 = (unsigned long) f;\n    f  = (unsigned long long) h2 + st->pad[2] + (f >> 32);\n    h2 = (unsigned long) f;\n    f  = (unsigned long long) h3 + st->pad[3] + (f >> 32);\n    h3 = (unsigned long) f;\n\n    STORE32_LE(mac + 0, (uint32_t) h0);\n    STORE32_LE(mac + 4, (uint32_t) h1);\n    STORE32_LE(mac + 8, (uint32_t) h2);\n    STORE32_LE(mac + 12, (uint32_t) h3);\n\n    /* zero out the state */\n    sodium_memzero((void *) st, sizeof *st);\n}\n","\n#include \"onetimeauth_poly1305.h\"\n#include \"crypto_onetimeauth_poly1305.h\"\n#include \"private/common.h\"\n#include \"randombytes.h\"\n#include \"runtime.h\"\n\n#include \"donna/poly1305_donna.h\"\n#if defined(HAVE_TI_MODE) && defined(HAVE_EMMINTRIN_H)\n# include \"sse2/poly1305_sse2.h\"\n#endif\n\nstatic const crypto_onetimeauth_poly1305_implementation *implementation =\n    &crypto_onetimeauth_poly1305_donna_implementation;\n\nint\ncrypto_onetimeauth_poly1305(unsigned char *out, const unsigned char *in,\n                            unsigned long long inlen, const unsigned char *k)\n{\n    return implementation->onetimeauth(out, in, inlen, k);\n}\n\nint\ncrypto_onetimeauth_poly1305_verify(const unsigned char *h,\n                                   const unsigned char *in,\n                                   unsigned long long   inlen,\n                                   const unsigned char *k)\n{\n    return implementation->onetimeauth_verify(h, in, inlen, k);\n}\n\nint\ncrypto_onetimeauth_poly1305_init(crypto_onetimeauth_poly1305_state *state,\n                                 const unsigned char *key)\n{\n    return implementation->onetimeauth_init(state, key);\n}\n\nint\ncrypto_onetimeauth_poly1305_update(crypto_onetimeauth_poly1305_state *state,\n                                   const unsigned char *in,\n                                   unsigned long long inlen)\n{\n    return implementation->onetimeauth_update(state, in, inlen);\n}\n\nint\ncrypto_onetimeauth_poly1305_final(crypto_onetimeauth_poly1305_state *state,\n                                  unsigned char *out)\n{\n    return implementation->onetimeauth_final(state, out);\n}\n\nsize_t\ncrypto_onetimeauth_poly1305_bytes(void)\n{\n    return crypto_onetimeauth_poly1305_BYTES;\n}\n\nsize_t\ncrypto_onetimeauth_poly1305_keybytes(void)\n{\n    return crypto_onetimeauth_poly1305_KEYBYTES;\n}\n\nsize_t\ncrypto_onetimeauth_poly1305_statebytes(void)\n{\n    return sizeof(crypto_onetimeauth_poly1305_state);\n}\n\nvoid\ncrypto_onetimeauth_poly1305_keygen(\n    unsigned char k[crypto_onetimeauth_poly1305_KEYBYTES])\n{\n    randombytes_buf(k, crypto_onetimeauth_poly1305_KEYBYTES);\n}\n\nint\n_crypto_onetimeauth_poly1305_pick_best_implementation(void)\n{\n    implementation = &crypto_onetimeauth_poly1305_donna_implementation;\n#if defined(HAVE_TI_MODE) && defined(HAVE_EMMINTRIN_H)\n    if (sodium_runtime_has_sse2()) {\n        implementation = &crypto_onetimeauth_poly1305_sse2_implementation;\n    }\n#endif\n    return 0;\n}\n","/*\nversion 20140420\nD. J. Bernstein\nPublic domain.\n*/\n\n#include <stdint.h>\n\n#include \"crypto_core_salsa20.h\"\n#include \"crypto_stream_salsa20.h\"\n#include \"utils.h\"\n\n#include \"../stream_salsa20.h\"\n#include \"salsa20_ref.h\"\n\n#ifndef HAVE_AMD64_ASM\n\nstatic int\nstream_ref(unsigned char *c, unsigned long long clen, const unsigned char *n,\n           const unsigned char *k)\n{\n    unsigned char in[16];\n    unsigned char block[64];\n    unsigned char kcopy[32];\n    unsigned int  i;\n    unsigned int  u;\n\n    if (!clen) {\n        return 0;\n    }\n    for (i = 0; i < 32; i++) {\n        kcopy[i] = k[i];\n    }\n    for (i = 0; i < 8; i++) {\n        in[i] = n[i];\n    }\n    for (i = 8; i < 16; i++) {\n        in[i] = 0;\n    }\n    while (clen >= 64) {\n        crypto_core_salsa20(c, in, kcopy, NULL);\n        u = 1;\n        for (i = 8; i < 16; i++) {\n            u += (unsigned int) in[i];\n            in[i] = u;\n            u >>= 8;\n        }\n        clen -= 64;\n        c += 64;\n    }\n    if (clen) {\n        crypto_core_salsa20(block, in, kcopy, NULL);\n        for (i = 0; i < (unsigned int) clen; i++) {\n            c[i] = block[i];\n        }\n    }\n    sodium_memzero(block, sizeof block);\n    sodium_memzero(kcopy, sizeof kcopy);\n\n    return 0;\n}\n\nstatic int\nstream_ref_xor_ic(unsigned char *c, const unsigned char *m,\n                  unsigned long long mlen, const unsigned char *n, uint64_t ic,\n                  const unsigned char *k)\n{\n    unsigned char in[16];\n    unsigned char block[64];\n    unsigned char kcopy[32];\n    unsigned int  i;\n    unsigned int  u;\n\n    if (!mlen) {\n        return 0;\n    }\n    for (i = 0; i < 32; i++) {\n        kcopy[i] = k[i];\n    }\n    for (i = 0; i < 8; i++) {\n        in[i] = n[i];\n    }\n    for (i = 8; i < 16; i++) {\n        in[i] = (unsigned char) (ic & 0xff);\n        ic >>= 8;\n    }\n    while (mlen >= 64) {\n        crypto_core_salsa20(block, in, kcopy, NULL);\n        for (i = 0; i < 64; i++) {\n            c[i] = m[i] ^ block[i];\n        }\n        u = 1;\n        for (i = 8; i < 16; i++) {\n            u += (unsigned int) in[i];\n            in[i] = u;\n            u >>= 8;\n        }\n        mlen -= 64;\n        c += 64;\n        m += 64;\n    }\n    if (mlen) {\n        crypto_core_salsa20(block, in, kcopy, NULL);\n        for (i = 0; i < (unsigned int) mlen; i++) {\n            c[i] = m[i] ^ block[i];\n        }\n    }\n    sodium_memzero(block, sizeof block);\n    sodium_memzero(kcopy, sizeof kcopy);\n\n    return 0;\n}\n\nstruct crypto_stream_salsa20_implementation\n    crypto_stream_salsa20_ref_implementation = {\n        SODIUM_C99(.stream =) stream_ref,\n        SODIUM_C99(.stream_xor_ic =) stream_ref_xor_ic,\n    };\n\n#endif\n","#include \"crypto_stream_salsa20.h\"\n#include \"private/common.h\"\n#include \"randombytes.h\"\n#include \"runtime.h\"\n#include \"stream_salsa20.h\"\n\n#ifdef HAVE_AMD64_ASM\n# include \"xmm6/salsa20_xmm6.h\"\n#else\n# include \"ref/salsa20_ref.h\"\n#endif\n#if !defined(HAVE_AMD64_ASM) && defined(HAVE_EMMINTRIN_H)\n# include \"xmm6int/salsa20_xmm6int-sse2.h\"\n#endif\n#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \\\n    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)\n# include \"xmm6int/salsa20_xmm6int-avx2.h\"\n#endif\n\n#if HAVE_AMD64_ASM\nstatic const crypto_stream_salsa20_implementation *implementation =\n    &crypto_stream_salsa20_xmm6_implementation;\n#else\nstatic const crypto_stream_salsa20_implementation *implementation =\n    &crypto_stream_salsa20_ref_implementation;\n#endif\n\nsize_t\ncrypto_stream_salsa20_keybytes(void)\n{\n    return crypto_stream_salsa20_KEYBYTES;\n}\n\nsize_t\ncrypto_stream_salsa20_noncebytes(void)\n{\n    return crypto_stream_salsa20_NONCEBYTES;\n}\n\nint\ncrypto_stream_salsa20(unsigned char *c, unsigned long long clen,\n                      const unsigned char *n, const unsigned char *k)\n{\n    return implementation->stream(c, clen, n, k);\n}\n\nint\ncrypto_stream_salsa20_xor_ic(unsigned char *c, const unsigned char *m,\n                             unsigned long long mlen,\n                             const unsigned char *n, uint64_t ic,\n                             const unsigned char *k)\n{\n    return implementation->stream_xor_ic(c, m, mlen, n, ic, k);\n}\n\nint\ncrypto_stream_salsa20_xor(unsigned char *c, const unsigned char *m,\n                          unsigned long long mlen, const unsigned char *n,\n                          const unsigned char *k)\n{\n    return implementation->stream_xor_ic(c, m, mlen, n, 0U, k);\n}\n\nvoid\ncrypto_stream_salsa20_keygen(unsigned char k[crypto_stream_salsa20_KEYBYTES])\n{\n    randombytes_buf(k, crypto_stream_salsa20_KEYBYTES);\n}\n\nint\n_crypto_stream_salsa20_pick_best_implementation(void)\n{\n#ifdef HAVE_AMD64_ASM\n    implementation = &crypto_stream_salsa20_xmm6_implementation;\n#else\n    implementation = &crypto_stream_salsa20_ref_implementation;\n#endif\n\n#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \\\n    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)\n    if (sodium_runtime_has_avx2()) {\n        implementation = &crypto_stream_salsa20_xmm6int_avx2_implementation;\n        return 0;\n    }\n#endif\n#if !defined(HAVE_AMD64_ASM) && defined(HAVE_EMMINTRIN_H)\n    if (sodium_runtime_has_sse2()) {\n        implementation = &crypto_stream_salsa20_xmm6int_sse2_implementation;\n        return 0;\n    }\n#endif\n    return 0;\n}\n","\n#include <stddef.h>\n#include <stdint.h>\n\n#include \"crypto_verify_16.h\"\n#include \"crypto_verify_32.h\"\n#include \"crypto_verify_64.h\"\n\nint\ncrypto_verify_16(const unsigned char *x, const unsigned char *y)\n{\n    uint_fast16_t d = 0U;\n    int           i;\n\n    for (i = 0; i < 16; i++) {\n        d |= x[i] ^ y[i];\n    }\n    return (1 & ((d - 1) >> 8)) - 1;\n}\n\nsize_t\ncrypto_verify_16_bytes(void)\n{\n    return crypto_verify_16_BYTES;\n}\n\nint\ncrypto_verify_32(const unsigned char *x, const unsigned char *y)\n{\n    uint_fast16_t d = 0U;\n    int           i;\n\n    for (i = 0; i < 32; i++) {\n        d |= x[i] ^ y[i];\n    }\n    return (1 & ((d - 1) >> 8)) - 1;\n}\n\nsize_t\ncrypto_verify_32_bytes(void)\n{\n    return crypto_verify_32_BYTES;\n}\n\nint\ncrypto_verify_64(const unsigned char *x, const unsigned char *y)\n{\n    uint_fast16_t d = 0U;\n    int           i;\n\n    for (i = 0; i < 64; i++) {\n        d |= x[i] ^ y[i];\n    }\n    return (1 & ((d - 1) >> 8)) - 1;\n}\n\nsize_t\ncrypto_verify_64_bytes(void)\n{\n    return crypto_verify_64_BYTES;\n}\n","/*\nThe Keccak sponge function, designed by Guido Bertoni, Joan Daemen,\nMichaël Peeters and Gilles Van Assche. For more information, feedback or\nquestions, please refer to our website: http://keccak.noekeon.org/\n\nImplementation by Ronny Van Keer,\nhereby denoted as \"the implementer\".\n\nTo the extent possible under law, the implementer has waived all copyright\nand related or neighboring rights to the source code in this file.\nhttp://creativecommons.org/publicdomain/zero/1.0/\n*/\n\n// WARNING: This implementation assumes a little-endian platform. Support for big-endinanness is not yet implemented.\n\n#include    <string.h>\n#include \"Keccak-simple-settings.h\"\n#define cKeccakR_SizeInBytes    (cKeccakR / 8)\n#include \"crypto_hash.h\"\n#ifndef crypto_hash_BYTES\n    #ifdef cKeccakFixedOutputLengthInBytes\n        #define crypto_hash_BYTES cKeccakFixedOutputLengthInBytes\n    #else\n        #define crypto_hash_BYTES cKeccakR_SizeInBytes\n    #endif\n#endif\n#if (crypto_hash_BYTES > cKeccakR_SizeInBytes)\n    #error \"Full squeezing not yet implemented\"\n#endif\n\n#if     (cKeccakB   == 1600)\n    typedef unsigned long long  UINT64;\n    typedef UINT64 tKeccakLane;\n    #define cKeccakNumberOfRounds   24\n#elif   (cKeccakB   == 800)\n    typedef unsigned int        UINT32;\n    // WARNING: on 8-bit and 16-bit platforms, this should be replaced by:\n    //typedef unsigned long       UINT32;\n    typedef UINT32 tKeccakLane;\n    #define cKeccakNumberOfRounds   22\n#elif   (cKeccakB   == 400)\n    typedef unsigned short      UINT16;\n    typedef UINT16 tKeccakLane;\n    #define cKeccakNumberOfRounds   20\n#elif   (cKeccakB   == 200)\n    typedef unsigned char       UINT8;\n    typedef UINT8 tKeccakLane;\n    #define cKeccakNumberOfRounds   18\n#else\n    #error  \"Unsupported Keccak-f width\"\n#endif\n\n#define cKeccakLaneSizeInBits   (sizeof(tKeccakLane) * 8)\n\n#define ROL(a, offset) ((((tKeccakLane)a) << ((offset) % cKeccakLaneSizeInBits)) ^ (((tKeccakLane)a) >> (cKeccakLaneSizeInBits-((offset) % cKeccakLaneSizeInBits))))\n#if ((cKeccakB/25) == 8)\n    #define ROL_mult8(a, offset) ((tKeccakLane)a)\n#else\n    #define ROL_mult8(a, offset) ROL(a, offset)\n#endif\nvoid KeccakF( tKeccakLane * state, const tKeccakLane *in, int laneCount );\n\nint crypto_hash( unsigned char *out, const unsigned char *in, unsigned long long inlen )\n{\n    tKeccakLane    state[5 * 5];\n#if (crypto_hash_BYTES >= cKeccakR_SizeInBytes)\n    #define temp out\n#else\n    unsigned char temp[cKeccakR_SizeInBytes];\n#endif\n\n    memset( state, 0, sizeof(state) );\n\n    for ( /* empty */; inlen >= cKeccakR_SizeInBytes; inlen -= cKeccakR_SizeInBytes, in += cKeccakR_SizeInBytes )\n    {\n        KeccakF( state, (const tKeccakLane*)in, cKeccakR_SizeInBytes / sizeof(tKeccakLane) );\n    }\n\n    //    padding\n    memcpy( temp, in, (size_t)inlen );\n    temp[inlen++] = 1;\n    memset( temp+inlen, 0, cKeccakR_SizeInBytes - (size_t)inlen );\n    temp[cKeccakR_SizeInBytes-1] |= 0x80;\n    KeccakF( state, (const tKeccakLane*)temp, cKeccakR_SizeInBytes / sizeof(tKeccakLane) );\n    memcpy( out, state, crypto_hash_BYTES );\n    #if (crypto_hash_BYTES >= cKeccakR_SizeInBytes)\n    #undef temp\n    #endif\n\n    return ( 0 );\n}\n\n\nconst tKeccakLane KeccakF_RoundConstants[cKeccakNumberOfRounds] = \n{\n    (tKeccakLane)0x0000000000000001ULL,\n    (tKeccakLane)0x0000000000008082ULL,\n    (tKeccakLane)0x800000000000808aULL,\n    (tKeccakLane)0x8000000080008000ULL,\n    (tKeccakLane)0x000000000000808bULL,\n    (tKeccakLane)0x0000000080000001ULL,\n    (tKeccakLane)0x8000000080008081ULL,\n    (tKeccakLane)0x8000000000008009ULL,\n    (tKeccakLane)0x000000000000008aULL,\n    (tKeccakLane)0x0000000000000088ULL,\n    (tKeccakLane)0x0000000080008009ULL,\n    (tKeccakLane)0x000000008000000aULL,\n    (tKeccakLane)0x000000008000808bULL,\n    (tKeccakLane)0x800000000000008bULL,\n    (tKeccakLane)0x8000000000008089ULL,\n    (tKeccakLane)0x8000000000008003ULL,\n    (tKeccakLane)0x8000000000008002ULL,\n    (tKeccakLane)0x8000000000000080ULL\n\t#if\t\t(cKeccakB\t>= 400)\n  , (tKeccakLane)0x000000000000800aULL,\n    (tKeccakLane)0x800000008000000aULL\n\t#if\t\t(cKeccakB\t>= 800)\n  , (tKeccakLane)0x8000000080008081ULL,\n    (tKeccakLane)0x8000000000008080ULL\n\t#if\t\t(cKeccakB\t== 1600)\n  , (tKeccakLane)0x0000000080000001ULL,\n    (tKeccakLane)0x8000000080008008ULL\n\t#endif\n\t#endif\n\t#endif\n};\n\nvoid KeccakF( tKeccakLane * state, const tKeccakLane *in, int laneCount )\n{\n\n    {\n        while ( --laneCount >= 0 )\n        {\n            state[laneCount] ^= in[laneCount];\n        }\n    }\n\n    {\n        tKeccakLane Aba, Abe, Abi, Abo, Abu;\n        tKeccakLane Aga, Age, Agi, Ago, Agu;\n        tKeccakLane Aka, Ake, Aki, Ako, Aku;\n        tKeccakLane Ama, Ame, Ami, Amo, Amu;\n        tKeccakLane Asa, Ase, Asi, Aso, Asu;\n        tKeccakLane BCa, BCe, BCi, BCo, BCu;\n        tKeccakLane Da, De, Di, Do, Du;\n        tKeccakLane Eba, Ebe, Ebi, Ebo, Ebu;\n        tKeccakLane Ega, Ege, Egi, Ego, Egu;\n        tKeccakLane Eka, Eke, Eki, Eko, Eku;\n        tKeccakLane Ema, Eme, Emi, Emo, Emu;\n        tKeccakLane Esa, Ese, Esi, Eso, Esu;\n        #define    round    laneCount\n\n        //copyFromState(A, state)\n        Aba = state[ 0];\n        Abe = state[ 1];\n        Abi = state[ 2];\n        Abo = state[ 3];\n        Abu = state[ 4];\n        Aga = state[ 5];\n        Age = state[ 6];\n        Agi = state[ 7];\n        Ago = state[ 8];\n        Agu = state[ 9];\n        Aka = state[10];\n        Ake = state[11];\n        Aki = state[12];\n        Ako = state[13];\n        Aku = state[14];\n        Ama = state[15];\n        Ame = state[16];\n        Ami = state[17];\n        Amo = state[18];\n        Amu = state[19];\n        Asa = state[20];\n        Ase = state[21];\n        Asi = state[22];\n        Aso = state[23];\n        Asu = state[24];\n\n        for( round = 0; round < cKeccakNumberOfRounds; round += 2 )\n        {\n            //    prepareTheta\n            BCa = Aba^Aga^Aka^Ama^Asa;\n            BCe = Abe^Age^Ake^Ame^Ase;\n            BCi = Abi^Agi^Aki^Ami^Asi;\n            BCo = Abo^Ago^Ako^Amo^Aso;\n            BCu = Abu^Agu^Aku^Amu^Asu;\n\n            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)\n            Da = BCu^ROL(BCe, 1);\n            De = BCa^ROL(BCi, 1);\n            Di = BCe^ROL(BCo, 1);\n            Do = BCi^ROL(BCu, 1);\n            Du = BCo^ROL(BCa, 1);\n\n            Aba ^= Da;\n            BCa = Aba;\n            Age ^= De;\n            BCe = ROL(Age, 44);\n            Aki ^= Di;\n            BCi = ROL(Aki, 43);\n            Amo ^= Do;\n            BCo = ROL(Amo, 21);\n            Asu ^= Du;\n            BCu = ROL(Asu, 14);\n            Eba =   BCa ^((~BCe)&  BCi );\n            Eba ^= (tKeccakLane)KeccakF_RoundConstants[round];\n            Ebe =   BCe ^((~BCi)&  BCo );\n            Ebi =   BCi ^((~BCo)&  BCu );\n            Ebo =   BCo ^((~BCu)&  BCa );\n            Ebu =   BCu ^((~BCa)&  BCe );\n\n            Abo ^= Do;\n            BCa = ROL(Abo, 28);\n            Agu ^= Du;\n            BCe = ROL(Agu, 20);\n            Aka ^= Da;\n            BCi = ROL(Aka,  3);\n            Ame ^= De;\n            BCo = ROL(Ame, 45);\n            Asi ^= Di;\n            BCu = ROL(Asi, 61);\n            Ega =   BCa ^((~BCe)&  BCi );\n            Ege =   BCe ^((~BCi)&  BCo );\n            Egi =   BCi ^((~BCo)&  BCu );\n            Ego =   BCo ^((~BCu)&  BCa );\n            Egu =   BCu ^((~BCa)&  BCe );\n\n            Abe ^= De;\n            BCa = ROL(Abe,  1);\n            Agi ^= Di;\n            BCe = ROL(Agi,  6);\n            Ako ^= Do;\n            BCi = ROL(Ako, 25);\n            Amu ^= Du;\n            BCo = ROL_mult8(Amu,  8);\n            Asa ^= Da;\n            BCu = ROL(Asa, 18);\n            Eka =   BCa ^((~BCe)&  BCi );\n            Eke =   BCe ^((~BCi)&  BCo );\n            Eki =   BCi ^((~BCo)&  BCu );\n            Eko =   BCo ^((~BCu)&  BCa );\n            Eku =   BCu ^((~BCa)&  BCe );\n\n            Abu ^= Du;\n            BCa = ROL(Abu, 27);\n            Aga ^= Da;\n            BCe = ROL(Aga, 36);\n            Ake ^= De;\n            BCi = ROL(Ake, 10);\n            Ami ^= Di;\n            BCo = ROL(Ami, 15);\n            Aso ^= Do;\n            BCu = ROL_mult8(Aso, 56);\n            Ema =   BCa ^((~BCe)&  BCi );\n            Eme =   BCe ^((~BCi)&  BCo );\n            Emi =   BCi ^((~BCo)&  BCu );\n            Emo =   BCo ^((~BCu)&  BCa );\n            Emu =   BCu ^((~BCa)&  BCe );\n\n            Abi ^= Di;\n            BCa = ROL(Abi, 62);\n            Ago ^= Do;\n            BCe = ROL(Ago, 55);\n            Aku ^= Du;\n            BCi = ROL(Aku, 39);\n            Ama ^= Da;\n            BCo = ROL(Ama, 41);\n            Ase ^= De;\n            BCu = ROL(Ase,  2);\n            Esa =   BCa ^((~BCe)&  BCi );\n            Ese =   BCe ^((~BCi)&  BCo );\n            Esi =   BCi ^((~BCo)&  BCu );\n            Eso =   BCo ^((~BCu)&  BCa );\n            Esu =   BCu ^((~BCa)&  BCe );\n\n            //    prepareTheta\n            BCa = Eba^Ega^Eka^Ema^Esa;\n            BCe = Ebe^Ege^Eke^Eme^Ese;\n            BCi = Ebi^Egi^Eki^Emi^Esi;\n            BCo = Ebo^Ego^Eko^Emo^Eso;\n            BCu = Ebu^Egu^Eku^Emu^Esu;\n\n            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)\n            Da = BCu^ROL(BCe, 1);\n            De = BCa^ROL(BCi, 1);\n            Di = BCe^ROL(BCo, 1);\n            Do = BCi^ROL(BCu, 1);\n            Du = BCo^ROL(BCa, 1);\n\n            Eba ^= Da;\n            BCa = Eba;\n            Ege ^= De;\n            BCe = ROL(Ege, 44);\n            Eki ^= Di;\n            BCi = ROL(Eki, 43);\n            Emo ^= Do;\n            BCo = ROL(Emo, 21);\n            Esu ^= Du;\n            BCu = ROL(Esu, 14);\n            Aba =   BCa ^((~BCe)&  BCi );\n            Aba ^= (tKeccakLane)KeccakF_RoundConstants[round+1];\n            Abe =   BCe ^((~BCi)&  BCo );\n            Abi =   BCi ^((~BCo)&  BCu );\n            Abo =   BCo ^((~BCu)&  BCa );\n            Abu =   BCu ^((~BCa)&  BCe );\n\n            Ebo ^= Do;\n            BCa = ROL(Ebo, 28);\n            Egu ^= Du;\n            BCe = ROL(Egu, 20);\n            Eka ^= Da;\n            BCi = ROL(Eka, 3);\n            Eme ^= De;\n            BCo = ROL(Eme, 45);\n            Esi ^= Di;\n            BCu = ROL(Esi, 61);\n            Aga =   BCa ^((~BCe)&  BCi );\n            Age =   BCe ^((~BCi)&  BCo );\n            Agi =   BCi ^((~BCo)&  BCu );\n            Ago =   BCo ^((~BCu)&  BCa );\n            Agu =   BCu ^((~BCa)&  BCe );\n\n            Ebe ^= De;\n            BCa = ROL(Ebe, 1);\n            Egi ^= Di;\n            BCe = ROL(Egi, 6);\n            Eko ^= Do;\n            BCi = ROL(Eko, 25);\n            Emu ^= Du;\n            BCo = ROL_mult8(Emu, 8);\n            Esa ^= Da;\n            BCu = ROL(Esa, 18);\n            Aka =   BCa ^((~BCe)&  BCi );\n            Ake =   BCe ^((~BCi)&  BCo );\n            Aki =   BCi ^((~BCo)&  BCu );\n            Ako =   BCo ^((~BCu)&  BCa );\n            Aku =   BCu ^((~BCa)&  BCe );\n\n            Ebu ^= Du;\n            BCa = ROL(Ebu, 27);\n            Ega ^= Da;\n            BCe = ROL(Ega, 36);\n            Eke ^= De;\n            BCi = ROL(Eke, 10);\n            Emi ^= Di;\n            BCo = ROL(Emi, 15);\n            Eso ^= Do;\n            BCu = ROL_mult8(Eso, 56);\n            Ama =   BCa ^((~BCe)&  BCi );\n            Ame =   BCe ^((~BCi)&  BCo );\n            Ami =   BCi ^((~BCo)&  BCu );\n            Amo =   BCo ^((~BCu)&  BCa );\n            Amu =   BCu ^((~BCa)&  BCe );\n\n            Ebi ^= Di;\n            BCa = ROL(Ebi, 62);\n            Ego ^= Do;\n            BCe = ROL(Ego, 55);\n            Eku ^= Du;\n            BCi = ROL(Eku, 39);\n            Ema ^= Da;\n            BCo = ROL(Ema, 41);\n            Ese ^= De;\n            BCu = ROL(Ese, 2);\n            Asa =   BCa ^((~BCe)&  BCi );\n            Ase =   BCe ^((~BCi)&  BCo );\n            Asi =   BCi ^((~BCo)&  BCu );\n            Aso =   BCo ^((~BCu)&  BCa );\n            Asu =   BCu ^((~BCa)&  BCe );\n        }\n\n        //copyToState(state, A)\n        state[ 0] = Aba;\n        state[ 1] = Abe;\n        state[ 2] = Abi;\n        state[ 3] = Abo;\n        state[ 4] = Abu;\n        state[ 5] = Aga;\n        state[ 6] = Age;\n        state[ 7] = Agi;\n        state[ 8] = Ago;\n        state[ 9] = Agu;\n        state[10] = Aka;\n        state[11] = Ake;\n        state[12] = Aki;\n        state[13] = Ako;\n        state[14] = Aku;\n        state[15] = Ama;\n        state[16] = Ame;\n        state[17] = Ami;\n        state[18] = Amo;\n        state[19] = Amu;\n        state[20] = Asa;\n        state[21] = Ase;\n        state[22] = Asi;\n        state[23] = Aso;\n        state[24] = Asu;\n\n        #undef    round\n    }\n\n}\n","#include \"benes.h\"\n#include \"randombytes.h\"\n#include \"transpose.h\"\n\n#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <assert.h>\n\nstatic void func(uint64_t *bs, uint64_t *cond_ptr, int low)\n{\n\tint i, j, x, y;\n\n\tint high = 5 - low;\n\n\tuint64_t diff;  \n\n\t//\n\n\tfor (j = 0; j < (1 << low); j++)\n\t{\n\t\tx = (0 << low) + j;\n\t\ty = (1 << low) + j;\n\n\t\tfor (i = 0; i < (1 << high); i++)\n\t\t{\n\t\t\tdiff = bs[ x ] ^ bs[ y ];\n\t\t\tdiff &= (*cond_ptr++);\n\t\t\tbs[ x ] ^= diff;\t\t\t\n\t\t\tbs[ y ] ^= diff;\t\t\t\n\n\t\t\tx += (1 << (low+1));\n\t\t\ty += (1 << (low+1));\n\t\t}\n\t}\n}\n\nvoid benes_compact(uint64_t *bs, uint64_t *cond, int rev)\n{\n\tuint64_t *cond_ptr; \n\tint inc, low;\n\n\t//\n\n\tif (rev == 0) \n\t{\n\t\tinc = 32;\n\t\tcond_ptr = cond;\n\t}\n\telse\n\t{\n\t\tinc = -32;\n\t\tcond_ptr = &cond[704];\n\t}\n\t\n\t//\n\n\tfor (low = 0; low <= 5; low++) { func(bs, cond_ptr, low); cond_ptr += inc; }\n\t\n\ttranspose_64x64_compact(bs, bs);\n\t\n\tfor (low = 0; low <= 5; low++) { func(bs, cond_ptr, low); cond_ptr += inc; }\n\tfor (low = 4; low >= 0; low--) { func(bs, cond_ptr, low); cond_ptr += inc; }\n\n\ttranspose_64x64_compact(bs, bs);\n\t\n\tfor (low = 5; low >= 0; low--) { func(bs, cond_ptr, low); cond_ptr += inc; }\n}\n\n","#include \"bm.h\"\n\n#include \"util.h\"\n#include \"vec.h\"\n#include \"gf.h\"\n\n#include <stdint.h>\n\ntypedef uint16_t gf;\n\nvoid into_vec(uint64_t *out, gf in)\n{\n\tint i;\n\n\tfor (i = 0; i < GFBITS; i++)\n\t{\n\t\tout[i] = (in >> i) & 1;\n\t\tout[i] = -out[i];\n\t}\n}\n\ngf vec_reduce(uint64_t *prod)\n{\n\tint i;\n\n\tuint64_t tmp[ GFBITS ];\n\tgf ret = 0;\n\n\tfor (i = 0; i < GFBITS; i++)\n\t{\n\t\ttmp[i] = prod[i];\n\t}\n\n\tfor (i = GFBITS-1; i >= 0; i--) tmp[i] ^= (tmp[i] >> 32);\n\tfor (i = GFBITS-1; i >= 0; i--) tmp[i] ^= (tmp[i] >> 16);\n\tfor (i = GFBITS-1; i >= 0; i--) tmp[i] ^= (tmp[i] >> 8);\n\tfor (i = GFBITS-1; i >= 0; i--) tmp[i] ^= (tmp[i] >> 4);\n\tfor (i = GFBITS-1; i >= 0; i--) \n\t{\n\t\tret <<= 1;\n\t\tret |= (0x6996 >> (tmp[i] & 0xF)) & 1;\n\t};\n\n\treturn ret;\n}\n\nuint64_t mask_nonzero_64bit(gf a)\n{\n\tuint64_t ret = a;\n\n\tret -= 1;\n\tret >>= 63;\n\tret -= 1;\n\n\treturn ret;\n}\n\nuint64_t mask_leq_64bit(uint16_t a, uint16_t b)\n{\n\tuint64_t a_tmp = a;\n\tuint64_t b_tmp = b;\n\tuint64_t ret = b_tmp - a_tmp; \n\n\tret >>= 63;\n\tret -= 1;\n\n\treturn ret;\n}\n\nvoid vec_cmov(uint64_t *out, uint64_t *in, uint64_t mask)\n{\n\tint i;\n\n\tfor (i = 0; i < GFBITS; i++)\n\t\tout[i] = (in[i] & mask) | (out[i] & ~mask);\n}\n\nvoid bm(uint64_t out[ GFBITS ], uint64_t in[][ GFBITS ])\n{\n\tuint16_t i;\n\tuint16_t N, L;\n\n\tuint64_t C[ GFBITS ], B[ GFBITS ], prod[ GFBITS ];\n\tuint64_t in_tmp[ GFBITS ], r_vec[ GFBITS ], C_tmp[ GFBITS ];\n\n\tuint64_t mask_nz, mask_leq;\n\tuint16_t mask_16b;\n\n\tgf d, b, b_inv, r;\n\n\t// init\n\n\tC[0] = 1; C[0] <<= 63;\n\tB[0] = 1; B[0] <<= 62;\n\n\tfor (i = 1; i < GFBITS; i++)\n\t\tB[i] = C[i] = 0;\n\n\tb = 1;\n\tL = 0;\n\n\t//\n\n\tfor (N = 0; N < SYS_T * 2; N++)\n\t{\n\t\t// computing d\n\n\t\tif (N < 64)\n\t\t\tfor (i = 0; i < GFBITS; i++)\n\t\t\t\tin_tmp[i] = in[0][i] << (63-N);\n\n\t\telse\n\t\t\tfor (i = 0; i < GFBITS; i++)\n\t\t\t\tin_tmp[i] = (in[0][i] >> (N-63)) | (in[1][i] << (127-N));\n\n\t\tvec_mul(prod, C, in_tmp);\n\t\td = vec_reduce(prod);\n\n\t\t// 3 cases\n\n\t\tb_inv = gf_inv(b);\n\t\tr = gf_mul(d, b_inv);\n\t\tinto_vec(r_vec, r);\n\t\tvec_mul(C_tmp, r_vec, B);\n\n\t\tfor (i = 0; i < GFBITS; i++) C_tmp[i] ^= C[i]; \n\n\t\tmask_nz = mask_nonzero_64bit(d);\n\t\tmask_leq = mask_leq_64bit(L*2, N);\n\t\tmask_16b = (mask_nz & mask_leq) & 0xFFFF;\n\n\t\tvec_cmov(B, C, mask_nz & mask_leq);\n\t\tvec_copy(C, C_tmp);\n\n\t\tb = (d & mask_16b) | (b & ~mask_16b);\n\t\tL = ((N+1-L) & mask_16b) | (L & ~mask_16b);\n\n\t\tfor (i = 0; i < GFBITS; i++)\n\t\t\tB[i] >>= 1;\n\t}\n\n\tvec_copy(out, C);\n\n\tfor (i = 0; i < GFBITS; i++)\n\t\tout[i] >>= 64 - (SYS_T+1);\n}\n\n","#include \"decrypt.h\"\n\n#include \"vec.h\"\n#include \"util.h\"\n#include \"params.h\"\n#include \"fft.h\"\n#include \"fft_tr.h\"\n#include \"bm.h\"\n#include \"benes.h\"\n#include \"transpose.h\"\n\n#include <stdint.h>\n#include <stdio.h>\n\nstatic void scaling(uint64_t out[][GFBITS], uint64_t inv[][GFBITS], const unsigned char *sk, uint64_t *recv)\n{\n\tint i, j;\n\tuint64_t sk_int[ GFBITS ];\n\n\tuint64_t eval[64][ GFBITS ];\n\tuint64_t tmp[ GFBITS ];\n\n\t// computing inverses\n\n\tfor (i = 0; i < GFBITS; i++)\n\t\tsk_int[i] = load8(sk + i*8);\n\n\tfft(eval, sk_int);\n\n\tfor (i = 0; i < 64; i++)\n\t\tvec_sq(eval[i], eval[i]);\n\n\tvec_copy(inv[0], eval[0]);\n\n\tfor (i = 1; i < 64; i++)\n\t\tvec_mul(inv[i], inv[i-1], eval[i]);\n\n\tvec_inv(tmp, inv[63]);\n\n\tfor (i = 62; i >= 0; i--)\n\t{\n\t\tvec_mul(inv[i+1], tmp, inv[i]);\n\t\tvec_mul(tmp, tmp, eval[i+1]);\n\t}\n\n\tvec_copy(inv[0], tmp);\n\t\n\t//\n\n\tfor (i = 0; i < 64; i++)\n\tfor (j = 0; j < GFBITS; j++)\n\t\tout[i][j] = inv[i][j] & recv[i];\n}\n\nstatic void scaling_inv(uint64_t out[][GFBITS], uint64_t inv[][GFBITS], uint64_t *recv)\n{\n\tint i, j;\n\n\tfor (i = 0; i < 64; i++)\n\tfor (j = 0; j < GFBITS; j++)\n\t\tout[i][j] = inv[i][j] & recv[i];\n}\n\nstatic void preprocess(uint64_t *recv, const unsigned char *s)\n{\n\tint i;\n\n\tfor (i = 0; i < 64; i++)\n\t\trecv[i] = 0;\n\n\tfor (i = 0; i < SYND_BYTES/8 ; i++)\n\t\trecv[i] = load8(s + i*8);\n\n\tfor (i = SYND_BYTES%8 - 1; i >= 0; i--)\n\t{\n\t\trecv[ SYND_BYTES/8 ] <<= 8;\n\t\trecv[ SYND_BYTES/8 ] |= s[ SYND_BYTES/8*8 + i ];\n\t}\n}\n\n//\n\nvoid acc(uint64_t *c, uint64_t v)\n{\n\tint i;\n\n\tuint64_t carry = v;\n\tuint64_t t;\n\n\tfor (i = 0; i < 8; i++)\n\t{\n\t\tt = c[i] ^ carry;\n\t\tcarry = c[i] & carry;\n\n\t\tc[i] = t;\n\t}\n}\n\nint weight(uint64_t *v)\n{\n\tint i;\n\tint w;\t\n\n\tunion {\n\t\tuint64_t data_64[ 8 ];\n\t\tuint8_t data_8[ 64 ];\n\t} counter;\n\n\t//\n\n\tfor (i = 0; i < 8; i++)\n\t\tcounter.data_64[i] = 0;\n\n\tfor (i = 0; i < 64; i++)\n\t\tacc(counter.data_64, v[i]);\n\n\ttranspose_8x64(counter.data_64);\n\n\t//\n\n\tw = 0;\n\tfor (i = 0; i < 64; i++)\n\t\tw += counter.data_8[i];\n\n\treturn w;\n}\n\n//\n\nvoid syndrome_adjust(uint64_t in[][ GFBITS ])\n{\n\tint i;\n\n\tfor (i = 0; i < GFBITS; i++)\n\t{\n\t\tin[1][i] <<= (128 - SYS_T*2); \n\t\tin[1][i] >>= (128 - SYS_T*2);\n\t}\n}\n\nint decrypt_mcbits(unsigned char *e, const unsigned char *sk, const unsigned char *s)\n{\n\tint i, j;\n\t\n\tuint64_t t;\n\n\tuint64_t diff;\n\n\tuint64_t inv[ 64 ][ GFBITS ];\n\tuint64_t scaled[ 64 ][ GFBITS ];\n\tuint64_t eval[ 64 ][ GFBITS ];\n\n\tuint64_t error[ 64 ];\n\n\tuint64_t s_priv[ 2 ][ GFBITS ];\n\tuint64_t s_priv_cmp[ 2 ][ GFBITS ];\n\tuint64_t locator[ GFBITS ];\n\n\tuint64_t recv[ 64 ];\n\tuint64_t cond[ COND_BYTES / 8 ];\n\n\t//\n\n\tfor (i = 0; i < COND_BYTES / 8; i++) \n\t\tcond[i] = load8(sk + IRR_BYTES + i*8);\n\n\tpreprocess(recv, s);\n\tbenes_compact(recv, cond, 1);\n\tscaling(scaled, inv, sk, recv); // scaling\n\tfft_tr(s_priv, scaled); // transposed FFT\n\tsyndrome_adjust(s_priv);\n\tbm(locator, s_priv); // Berlekamp Massey\n\tfft(eval, locator); // FFT\n\n\tfor (i = 0; i < 64; i++)\n\t{\n\t\terror[i] = vec_or(eval[i]);\n\t\terror[i] = ~error[i];\n\t}\n\n\n\t{\n\t\t// reencrypt\n\n\t\tscaling_inv(scaled, inv, error);\n\t\tfft_tr(s_priv_cmp, scaled);\n\t\tsyndrome_adjust(s_priv_cmp);\n\t\n\t\tdiff = 0;\n\t\tfor (i = 0; i < 2; i++)\n\t\tfor (j = 0; j < GFBITS; j++)\n\t\t\tdiff |= s_priv[i][j] ^ s_priv_cmp[i][j];\n\t\n\t\tdiff |= diff >> 32;\n\t\tdiff |= diff >> 16;\n\t\tdiff |= diff >> 8;\n\t\tt = diff & 0xFF;\n\t}\n\n\tbenes_compact(error, cond, 0);\n\n\tfor (i = 0; i < 64; i++)\n\t\tstore8(e + i*8, error[i]);\n\t\n\t//\n\n\tt |= weight(error) ^ SYS_T;\n\tt -= 1;\n\tt >>= 63;\n\n\treturn (t-1);\n}\n\n","#include \"encrypt.h\"\n#include \"randombytes.h\"\n#include \"params.h\"\n#include \"util.h\"\n#include \"transpose.h\"\n\n#include <stdint.h>\n#include <string.h>\n\nvoid gen_e(unsigned char *e)\n{\n\tint i, j, eq;\n\n\tuint16_t ind[ SYS_T ];\n\tuint64_t e_int[ 64 ];\t\n\tuint64_t one = 1;\t\n\tuint64_t mask;\t\n\tuint64_t val[ SYS_T ];\t\n\n\twhile (1)\n\t{\n\t\trandombytes((unsigned char *) ind, sizeof(ind));\n\n\t\tfor (i = 0; i < SYS_T; i++)\n\t\t\tind[i] &= (1 << GFBITS) - 1;\n\n\t\teq = 0;\n\t\tfor (i = 1; i < SYS_T; i++)\n\t\t\tfor (j = 0; j < i; j++)\n\t\t\t\tif (ind[i] == ind[j])\n\t\t\t\t\teq = 1;\n\n\t\tif (eq == 0)\n\t\t\tbreak;\n\t}\n\n\tfor (j = 0; j < SYS_T; j++)\n\t\tval[j] = one << (ind[j] & 63);\n\n\tfor (i = 0; i < 64; i++) \n\t{\n\t\te_int[i] = 0;\n\n\t\tfor (j = 0; j < SYS_T; j++)\n\t\t{\n\t\t\tmask = i ^ (ind[j] >> 6);\n\t\t\tmask -= 1;\n\t\t\tmask >>= 63;\n\t\t\tmask = -mask;\n\n\t\t\te_int[i] |= val[j] & mask;\n\t\t}\n\t}\n\n\tfor (i = 0; i < 64; i++)\n\t\tstore8(e + i*8, e_int[i]);\n}\n\nvoid syndrome(unsigned char *s, const unsigned char *pk, const unsigned char *e)\n{\n\tint i, j, t;\n\n\tconst unsigned char *e_ptr = e + SYND_BYTES;\n\tconst int c = (PK_NCOLS + 63) / 64;\n\n\tuint64_t e_int[ c ];\n\tuint64_t row_int[ c ];\n\tuint64_t tmp[ 8 ];\n\n\tunsigned char b;\n\n\t//\n\n\tmemcpy(s, e, SYND_BYTES);\n\n\te_int[ c-1 ] = 0;\n\tmemcpy(e_int, e_ptr, PK_NCOLS / 8);\n\n\tfor (i = 0; i < PK_NROWS; i += 8)\n\t{\n\t\tfor (t = 0; t < 8; t++)\n\t\t{\n\t\t\trow_int[ c-1 ] = 0;\n\t\t\tmemcpy(row_int, &pk[ (i + t)*(PK_NCOLS / 8) ], PK_NCOLS / 8);\n\n\t\t\ttmp[ t ] = 0;\n\t\t\tfor (j = 0; j < c; j++)\n\t\t\t\ttmp[ t ] ^= e_int[ j ] & row_int[ j ];\n\t\t}\n\n\t\tb = 0;\n\n\t\tfor (t = 7; t >= 0; t--) tmp[t] ^= (tmp[t] >> 32);\n\t\tfor (t = 7; t >= 0; t--) tmp[t] ^= (tmp[t] >> 16);\n\t\tfor (t = 7; t >= 0; t--) tmp[t] ^= (tmp[t] >> 8);\n\t\tfor (t = 7; t >= 0; t--) tmp[t] ^= (tmp[t] >> 4);\n\t\tfor (t = 7; t >= 0; t--)\n\t\t{\n\t\t\tb <<= 1;\n\t\t\tb |= (0x6996 >> (tmp[t] & 0xF)) & 1;\n\t\t}\n\n\t\ts[ i/8 ] ^= b;\n\t}\n}\n\nvoid encrypt_mcbits(unsigned char *s, unsigned char *e, const unsigned char *pk)\n{\n\tgen_e(e);\n\tsyndrome(s, pk, e);\n}\n\n","#include \"fft.h\"\n#include \"vec.h\"\n\nvoid radix_conversions(uint64_t *in)\n{\n\tint i, j, k;\n\n\tconst uint64_t mask[5][2] = \n\t{\n\t\t{0x8888888888888888, 0x4444444444444444},\n\t\t{0xC0C0C0C0C0C0C0C0, 0x3030303030303030},\n\t\t{0xF000F000F000F000, 0x0F000F000F000F00},\n\t\t{0xFF000000FF000000, 0x00FF000000FF0000},\n\t\t{0xFFFF000000000000, 0x0000FFFF00000000}\n\t};\n\n\tconst uint64_t s[5][GFBITS] = \n\t{\n#include \"scalars.data\"\n\t};\n\t\n\t//\n\n\tfor (j = 0; j <= 4; j++)\n\t{\n\t\tfor (i = 0; i < GFBITS; i++)\n\t\t\tfor (k = 4; k >= j; k--)\n\t\t\t{\n\t\t\t\tin[i] ^= (in[i] & mask[k][0]) >> (1 << k);\n\t\t\t\tin[i] ^= (in[i] & mask[k][1]) >> (1 << k);\n\t\t\t}\n\n\t\tvec_mul(in, in, s[j]); // scaling\n\t}\n}\n\nvoid butterflies(uint64_t out[][ GFBITS ], uint64_t *in)\n{\n\tint i, j, k, s, b;\n\n\tuint64_t tmp[ GFBITS ];\n\tuint64_t consts[ 63 ][ GFBITS ] =\n\t{\n#include \"consts.data\"\n\t};\n\n\tuint64_t consts_ptr = 0;\n\n\tconst unsigned char reversal[64] = \n\t{ \n\t  0, 32, 16, 48,  8, 40, 24, 56, \n\t  4, 36, 20, 52, 12, 44, 28, 60, \n\t  2, 34, 18, 50, 10, 42, 26, 58, \n\t  6, 38, 22, 54, 14, 46, 30, 62, \n\t  1, 33, 17, 49,  9, 41, 25, 57, \n\t  5, 37, 21, 53, 13, 45, 29, 61, \n\t  3, 35, 19, 51, 11, 43, 27, 59, \n\t  7, 39, 23, 55, 15, 47, 31, 63\n\t};\n\n\t// boradcast\n\n\tfor (j = 0; j < 64; j++)\n\tfor (i = 0; i < GFBITS; i++)\n\t{\n\t\t\tout[j][i] = (in[i] >> reversal[j]) & 1;\n\t\t\tout[j][i] = -out[j][i];\n\t}\n\n\t// butterflies\n\n\tfor (i = 0; i <= 5; i++)\n\t{\n\t\ts = 1 << i;\n\n\t\tfor (j = 0; j < 64; j += 2*s)\n\t\t{\n\t\t\tfor (k = j; k < j+s; k++)\n\t\t\t{\n\t\t\t\tvec_mul(tmp, out[k+s], consts[ consts_ptr + (k-j) ]);\n\n\t\t\t\tfor (b = 0; b < GFBITS; b++) out[k][b] ^= tmp[b];\n\t\t\t\tfor (b = 0; b < GFBITS; b++) out[k+s][b] ^= out[k][b];\n\t\t\t}\n\t\t}\n\n\t\tconsts_ptr += (1 << i);\n\t}\n\n}\n\nvoid fft(uint64_t out[][ GFBITS ], uint64_t *in)\n{\n\t\tradix_conversions(in);\n\t\tbutterflies(out, in);\n}\n\n","#include \"fft_tr.h\"\n\n#include \"vec.h\"\n#include \"transpose.h\"\n\n#include <stdint.h>\n\n#define vec_add(z, x, y) for (b = 0; b < GFBITS; b++) { z[b] = x[b]^y[b]; }\n\nvoid radix_conversions_tr(uint64_t in[][ GFBITS ])\n{\n\tint i, j, k;\n\n\tconst uint64_t mask[6][2] = \n\t{\n\t\t{0x2222222222222222, 0x4444444444444444}, \n\t\t{0x0C0C0C0C0C0C0C0C, 0x3030303030303030}, \n\t\t{0x00F000F000F000F0, 0x0F000F000F000F00}, \n\t\t{0x0000FF000000FF00, 0x00FF000000FF0000}, \n\t\t{0x00000000FFFF0000, 0x0000FFFF00000000}, \n\t\t{0xFFFFFFFF00000000, 0x00000000FFFFFFFF}\n\t};\n\n\tconst uint64_t s[5][2][GFBITS] = \n\t{\n#include \"scalars_2x.data\"\n\t};\n\t\n\t//\n\n\tfor (j = 5; j >= 0; j--)\n\t{\n\t\tif (j < 5)\n\t\t{\n\t\t\tvec_mul(in[0], in[0], s[j][0]); // scaling\n\t\t\tvec_mul(in[1], in[1], s[j][1]); // scaling\n\t\t}\n\n\t\tfor (i = 0; i < GFBITS; i++)\n\t\tfor (k = j; k <= 4; k++)\n\t\t{\n\t\t\tin[0][i] ^= (in[0][i] & mask[k][0]) << (1 << k);\n\t\t\tin[0][i] ^= (in[0][i] & mask[k][1]) << (1 << k);\n\n\t\t\tin[1][i] ^= (in[1][i] & mask[k][0]) << (1 << k);\n\t\t\tin[1][i] ^= (in[1][i] & mask[k][1]) << (1 << k);\n\t\t}\n\n\t\tfor (i = 0; i < GFBITS; i++)\n\t\t{\n\t\t\tin[1][i] ^= (in[0][i] & mask[5][0]) >> 32;\n\t\t\tin[1][i] ^= (in[1][i] & mask[5][1]) << 32;\n\t\t}\n\t}\n}\n\nvoid butterflies_tr(uint64_t out[][ GFBITS ], uint64_t in[][ GFBITS ])\n{\n\tint i, j, k, s, b;\n\n\tuint64_t tmp[ GFBITS ];\n\tuint64_t pre[6][ GFBITS ];\n\tuint64_t buf[64];\n\n\tconst uint64_t consts[ 63 ][ GFBITS ] =\n\t{\n#include \"consts.data\"\n\t};\n\n\tuint64_t consts_ptr = 63;\n\n\tconst unsigned char reversal[64] = \n\t{ \n\t  0, 32, 16, 48,  8, 40, 24, 56, \n\t  4, 36, 20, 52, 12, 44, 28, 60, \n\t  2, 34, 18, 50, 10, 42, 26, 58, \n\t  6, 38, 22, 54, 14, 46, 30, 62, \n\t  1, 33, 17, 49,  9, 41, 25, 57, \n\t  5, 37, 21, 53, 13, 45, 29, 61, \n\t  3, 35, 19, 51, 11, 43, 27, 59, \n\t  7, 39, 23, 55, 15, 47, 31, 63\n\t};\n\n\tconst uint16_t beta[6] = {8, 1300, 3408, 1354, 2341, 1154};\n\n\t// butterflies\n\n\tfor (i = 5; i >= 0; i--)\n\t{\n\t\ts = 1 << i;\n\t\tconsts_ptr -= s;\n\n\t\tfor (j = 0; j < 64; j += 2*s)\n\t\tfor (k = j; k < j+s; k++)\n\t\t{\n\t\t\tvec_add(in[k], in[k], in[k+s]);\n\t\t\tvec_mul(tmp, in[k], consts[ consts_ptr + (k-j) ]);\n\t\t\tvec_add(in[k+s], in[k+s], tmp);\n\t\t}\n\t}\n\n\t// transpose\n\n\tfor (i = 0; i < GFBITS; i++)\n\t{\n\t\tfor (j = 0; j < 64; j++)\n\t\t\tbuf[ reversal[j] ] = in[j][i];\n\n\t\ttranspose_64x64_compact(buf, buf);\n\t\n\t\tfor (j = 0; j < 64; j++)\n\t\t\tin[j][i] = buf[ j ];\n\t}\n\n\t// boradcast\n\n\tvec_copy(pre[0], in[32]); vec_add(in[33], in[33], in[32]);\n\tvec_copy(pre[1], in[33]); vec_add(in[35], in[35], in[33]);\n\tvec_add(pre[0], pre[0], in[35]); vec_add(in[34], in[34], in[35]);\n\tvec_copy(pre[2], in[34]); vec_add(in[38], in[38], in[34]);\n\tvec_add(pre[0], pre[0], in[38]); vec_add(in[39], in[39], in[38]);\n\tvec_add(pre[1], pre[1], in[39]); vec_add(in[37], in[37], in[39]);\n\tvec_add(pre[0], pre[0], in[37]); vec_add(in[36], in[36], in[37]);\n\tvec_copy(pre[3], in[36]); vec_add(in[44], in[44], in[36]);\n\tvec_add(pre[0], pre[0], in[44]); vec_add(in[45], in[45], in[44]);\n\tvec_add(pre[1], pre[1], in[45]); vec_add(in[47], in[47], in[45]);\n\tvec_add(pre[0], pre[0], in[47]); vec_add(in[46], in[46], in[47]);\n\tvec_add(pre[2], pre[2], in[46]); vec_add(in[42], in[42], in[46]);\n\tvec_add(pre[0], pre[0], in[42]); vec_add(in[43], in[43], in[42]);\n\tvec_add(pre[1], pre[1], in[43]); vec_add(in[41], in[41], in[43]);\n\tvec_add(pre[0], pre[0], in[41]); vec_add(in[40], in[40], in[41]);\n\tvec_copy(pre[4], in[40]); vec_add(in[56], in[56], in[40]);\n\tvec_add(pre[0], pre[0], in[56]); vec_add(in[57], in[57], in[56]);\n\tvec_add(pre[1], pre[1], in[57]); vec_add(in[59], in[59], in[57]);\n\tvec_add(pre[0], pre[0], in[59]); vec_add(in[58], in[58], in[59]);\n\tvec_add(pre[2], pre[2], in[58]); vec_add(in[62], in[62], in[58]);\n\tvec_add(pre[0], pre[0], in[62]); vec_add(in[63], in[63], in[62]);\n\tvec_add(pre[1], pre[1], in[63]); vec_add(in[61], in[61], in[63]);\n\tvec_add(pre[0], pre[0], in[61]); vec_add(in[60], in[60], in[61]);\n\tvec_add(pre[3], pre[3], in[60]); vec_add(in[52], in[52], in[60]);\n\tvec_add(pre[0], pre[0], in[52]); vec_add(in[53], in[53], in[52]);\n\tvec_add(pre[1], pre[1], in[53]); vec_add(in[55], in[55], in[53]);\n\tvec_add(pre[0], pre[0], in[55]); vec_add(in[54], in[54], in[55]);\n\tvec_add(pre[2], pre[2], in[54]); vec_add(in[50], in[50], in[54]);\n\tvec_add(pre[0], pre[0], in[50]); vec_add(in[51], in[51], in[50]);\n\tvec_add(pre[1], pre[1], in[51]); vec_add(in[49], in[49], in[51]);\n\tvec_add(pre[0], pre[0], in[49]); vec_add(in[48], in[48], in[49]);\n\tvec_copy(pre[5], in[48]); vec_add(in[16], in[16], in[48]);\n\tvec_add(pre[0], pre[0], in[16]); vec_add(in[17], in[17], in[16]);\n\tvec_add(pre[1], pre[1], in[17]); vec_add(in[19], in[19], in[17]);\n\tvec_add(pre[0], pre[0], in[19]); vec_add(in[18], in[18], in[19]);\n\tvec_add(pre[2], pre[2], in[18]); vec_add(in[22], in[22], in[18]);\n\tvec_add(pre[0], pre[0], in[22]); vec_add(in[23], in[23], in[22]);\n\tvec_add(pre[1], pre[1], in[23]); vec_add(in[21], in[21], in[23]);\n\tvec_add(pre[0], pre[0], in[21]); vec_add(in[20], in[20], in[21]);\n\tvec_add(pre[3], pre[3], in[20]); vec_add(in[28], in[28], in[20]);\n\tvec_add(pre[0], pre[0], in[28]); vec_add(in[29], in[29], in[28]);\n\tvec_add(pre[1], pre[1], in[29]); vec_add(in[31], in[31], in[29]);\n\tvec_add(pre[0], pre[0], in[31]); vec_add(in[30], in[30], in[31]);\n\tvec_add(pre[2], pre[2], in[30]); vec_add(in[26], in[26], in[30]);\n\tvec_add(pre[0], pre[0], in[26]); vec_add(in[27], in[27], in[26]);\n\tvec_add(pre[1], pre[1], in[27]); vec_add(in[25], in[25], in[27]);\n\tvec_add(pre[0], pre[0], in[25]); vec_add(in[24], in[24], in[25]);\n\tvec_add(pre[4], pre[4], in[24]); vec_add(in[8], in[8], in[24]);\n\tvec_add(pre[0], pre[0], in[8]); vec_add(in[9], in[9], in[8]);\n\tvec_add(pre[1], pre[1], in[9]); vec_add(in[11], in[11], in[9]);\n\tvec_add(pre[0], pre[0], in[11]); vec_add(in[10], in[10], in[11]);\n\tvec_add(pre[2], pre[2], in[10]); vec_add(in[14], in[14], in[10]);\n\tvec_add(pre[0], pre[0], in[14]); vec_add(in[15], in[15], in[14]);\n\tvec_add(pre[1], pre[1], in[15]); vec_add(in[13], in[13], in[15]);\n\tvec_add(pre[0], pre[0], in[13]); vec_add(in[12], in[12], in[13]);\n\tvec_add(pre[3], pre[3], in[12]); vec_add(in[4], in[4], in[12]);\n\tvec_add(pre[0], pre[0], in[4]); vec_add(in[5], in[5], in[4]);\n\tvec_add(pre[1], pre[1], in[5]); vec_add(in[7], in[7], in[5]);\n\tvec_add(pre[0], pre[0], in[7]); vec_add(in[6], in[6], in[7]);\n\tvec_add(pre[2], pre[2], in[6]); vec_add(in[2], in[2], in[6]);\n\tvec_add(pre[0], pre[0], in[2]); vec_add(in[3], in[3], in[2]);\n\tvec_add(pre[1], pre[1], in[3]); vec_add(in[1], in[1], in[3]);\n\n\tvec_add(pre[0], pre[0], in[1]); vec_add(out[0], in[0], in[1]);\n\n\t//\n\n\tfor (j = 0; j < GFBITS; j++) { tmp[j] = (beta[0] >> j) & 1; tmp[j] = -tmp[j]; }\n\n\tvec_mul(out[1], pre[0], tmp);\n\n\tfor (i = 1; i < 6; i++)\n\t{\n\t\tfor (j = 0; j < GFBITS; j++) { tmp[j] = (beta[i] >> j) & 1; tmp[j] = -tmp[j]; }\n\n\t\tvec_mul(tmp, pre[i], tmp);\n\t\tvec_add(out[1], out[1], tmp);\n\t}\n}\n\t\nvoid fft_tr(uint64_t out[][GFBITS], uint64_t in[][ GFBITS ])\n{\n\t\tbutterflies_tr(out, in);\n\t\tradix_conversions_tr(out);\n}\n\n","#include \"gf.h\"\n#include \"params.h\"\n\ngf gf_mul(gf in0, gf in1)\n{\n\tint i;\n\n\tuint32_t tmp;\n\tuint32_t t0;\n\tuint32_t t1;\n\tuint32_t t;\n\n\tt0 = in0;\n\tt1 = in1;\n\n\ttmp = t0 * (t1 & 1);\n\n\tfor (i = 1; i < GFBITS; i++)\n\t\ttmp ^= (t0 * (t1 & (1 << i)));\n\n\tt = tmp & 0x7FC000;\n\ttmp ^= t >> 9;\n\ttmp ^= t >> 12;\n\n\tt = tmp & 0x3000;\n\ttmp ^= t >> 9;\n\ttmp ^= t >> 12;\n\n\treturn tmp & ((1 << GFBITS)-1);\n}\n\ngf gf_sq(gf in)\n{\n\tconst uint32_t B[] = {0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF};\n\n\tuint32_t x = in; \n\tuint32_t t;\n\n\tx = (x | (x << 8)) & B[3];\n\tx = (x | (x << 4)) & B[2];\n\tx = (x | (x << 2)) & B[1];\n\tx = (x | (x << 1)) & B[0];\n\n\tt = x & 0x7FC000;\n\tx ^= t >> 9;\n\tx ^= t >> 12;\n\n\tt = x & 0x3000;\n\tx ^= t >> 9;\n\tx ^= t >> 12;\n\n\treturn x & ((1 << GFBITS)-1);\n}\n\ngf gf_inv(gf in)\n{\n\tgf tmp_11;\n\tgf tmp_1111;\n\n\tgf out = in;\n\n\tout = gf_sq(out);\n\ttmp_11 = gf_mul(out, in); // 11\n\n\tout = gf_sq(tmp_11);\n\tout = gf_sq(out);\n\ttmp_1111 = gf_mul(out, tmp_11); // 1111\n\n\tout = gf_sq(tmp_1111);\n\tout = gf_sq(out);\n\tout = gf_sq(out);\n\tout = gf_sq(out);\n\tout = gf_mul(out, tmp_1111); // 11111111\n\n\tout = gf_sq(out);\n\tout = gf_sq(out);\n\tout = gf_mul(out, tmp_11); // 1111111111\n\n\tout = gf_sq(out);\n\tout = gf_mul(out, in); // 11111111111\n\n\treturn gf_sq(out); // 111111111110\n}\n\ngf gf_diff(gf a, gf b)\n{\n\tuint32_t t = (uint32_t) (a ^ b);\n\n\tt = ((t-1) >> 20) ^ 0xFFF;\n\n\treturn (gf) t;\n}\n\n///////////////////////////////////////////////////////////\n\nvoid GF_mul(gf *out, gf *in0, gf *in1)\n{\n\tint i, j;\n\n\tgf tmp[123];\n\n\tfor (i = 0; i < 123; i++)\n\t\ttmp[i] = 0;\n\n\tfor (i = 0; i < 62; i++)\n\t\tfor (j = 0; j < 62; j++)\n\t\t\ttmp[i+j] ^= gf_mul(in0[i], in1[j]);\n\n\t//\n \n\tfor (i = 122; i >= 62; i--)\n\t{\n\t\ttmp[i - 55] ^= gf_mul(tmp[i], (gf) 1763);\n\t\ttmp[i - 61] ^= gf_mul(tmp[i], (gf) 1722);\n\t\ttmp[i - 62] ^= gf_mul(tmp[i], (gf) 4033);\n\t}\n\n\tfor (i = 0; i < 62; i++)\n\t\tout[i] = tmp[i];\n}\n\n","#include \"crypto_encrypt.h\"\n\n#include \"crypto_hash.h\"\n#include \"crypto_stream_salsa20.h\"\n#include \"crypto_onetimeauth_poly1305.h\"\n\n#include \"sk_gen.h\"\n#include \"pk_gen.h\"\n\n#include \"params.h\"\n#include \"encrypt.h\"\n#include \"decrypt.h\"\n\nint crypto_encrypt(\n       unsigned char *c,unsigned long long *clen,\n       const unsigned char *m,unsigned long long mlen,\n       const unsigned char *pk\n)\n{\n\tunsigned char e[ 1 << (GFBITS-3) ];\n\tunsigned char key[64];\n\tunsigned char nonce[8] = {0};\n\n\t//\n\n#define\tct (c + SYND_BYTES)\n#define\ttag (ct + mlen)\n\n\tencrypt_mcbits(c, e, pk);\n\n\tcrypto_hash(key, e, sizeof(e)); \n\tcrypto_stream_salsa20_xor(ct, m, mlen, nonce, key);\n\tcrypto_onetimeauth_poly1305(tag, ct, mlen, key + 32);\n\n\t*clen = SYND_BYTES + mlen + 16;\n\n#undef ct\n#undef tag\n\n\treturn 0;\n}\n\nint crypto_encrypt_open(\n       unsigned char *m,unsigned long long *mlen,\n       const unsigned char *c,unsigned long long clen,\n       const unsigned char *sk\n)\n{\n\tint ret;\n\tint ret_verify;\n\tint ret_decrypt;\n\n\tunsigned char key[64];\n\tunsigned char nonce[8] = {0};\n\tunsigned char e[ 1 << (GFBITS-3) ];\n\n\t//\n\n\tif (clen < SYND_BYTES + 16) return -1;\n\telse *mlen = clen - SYND_BYTES - 16;\n\n#define\tct (c + SYND_BYTES)\n#define\ttag (ct + *mlen)\n\n\tret_decrypt = decrypt_mcbits(e, sk, c);\n\n\tcrypto_hash(key, e, sizeof(e));\n\n\tret_verify = crypto_onetimeauth_poly1305_verify(tag, ct, *mlen, key + 32);\n\tcrypto_stream_salsa20_xor(m, ct, *mlen, nonce, key);\n\n\tret = ret_verify | ret_decrypt;\n\n#undef ct\n#undef tag\n\n\treturn ret;\n}\n\nint crypto_encrypt_keypair\n(\n       unsigned char *pk,\n       unsigned char *sk \n)\n{\n\twhile (1)\n\t{\n\t\tsk_gen(sk);\n\n\t\tif (pk_gen(pk, sk) == 0)\n\t\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\n","#include <stdint.h>\n\n#include \"pk_gen.h\"\n#include \"vec.h\"\n#include \"params.h\"\n#include \"util.h\"\n#include \"fft.h\"\n#include \"benes.h\"\n\nint pk_gen(unsigned char * pk, const unsigned char * sk)\n{\n\tunsigned char *pk_ptr = pk;\n\n\tint i, j, k;\n\tint row, c, tail;\n\n\tuint64_t mat[ GFBITS * SYS_T ][ 64 ];\n\tuint64_t mask;\t\n\tuint64_t u;\t\n\n\tuint64_t points[64][ GFBITS ] = \n\t{\n#include \"points.data\"\n\t};\n\n\tuint64_t sk_int[ GFBITS ];\n\n\tuint64_t eval[64][ GFBITS ];\n\tuint64_t inv[64][ GFBITS ];\n\tuint64_t tmp[ GFBITS ];\n\n\tuint64_t cond[ COND_BYTES / 8 ];\n\n\t// compute the inverses \n\n\tfor (i = 0; i < GFBITS; i++)\n\t\tsk_int[i] = load8(sk + i*8);\n\n\tfft(eval, sk_int);\n\n\tvec_copy(inv[0], eval[0]);\n\n\tfor (i = 1; i < 64; i++)\n\t\tvec_mul(inv[i], inv[i-1], eval[i]);\n\n\tvec_inv(tmp, inv[63]);\n\n\tfor (i = 62; i >= 0; i--)\n\t{\n\t\tvec_mul(inv[i+1], tmp, inv[i]);\n\t\tvec_mul(tmp, tmp, eval[i+1]);\n\t}\n\n\tvec_copy(inv[0], tmp);\n\n\t// fill matrix \n\n\tfor (j = 0; j < 64;     j++)\n\tfor (k = 0; k < GFBITS; k++)\n\t\tmat[ k ][ j ] = inv[ j ][ k ];\n\n\tfor (i = 1; i < SYS_T; i++)\n\tfor (j = 0; j < 64;    j++)\n\t{\n\t\tvec_mul(inv[j], inv[j], points[j]);\n\n\t\tfor (k = 0; k < GFBITS; k++)\n\t\t\tmat[ i*GFBITS + k ][ j ] = inv[ j ][ k ];\n\t}\n\n\t// permute\n\n\tfor (i = 0; i < COND_BYTES / 8; i++)\n\t\tcond[i] = load8(sk + IRR_BYTES + i*8);\n\n\tfor (i = 0; i < GFBITS * SYS_T; i++)\n\t\tbenes_compact(mat[ i ], cond, 0);\n\n\t// gaussian elimination \n\n\tfor (i = 0; i < (GFBITS * SYS_T + 63) / 64; i++)\n\tfor (j = 0; j < 64; j++)\n\t{\n\t\trow = i*64 + j;\t\t\t\n\n\t\tif (row >= GFBITS * SYS_T)\n\t\t\tbreak;\n\n\t\tfor (k = row + 1; k < GFBITS * SYS_T; k++)\n\t\t{\n\t\t\tmask = mat[ row ][ i ] ^ mat[ k ][ i ];\n\t\t\tmask >>= j;\n\t\t\tmask &= 1;\n\t\t\tmask = -mask;\n\n\t\t\tfor (c = 0; c < 64; c++)\n\t\t\t\tmat[ row ][ c ] ^= mat[ k ][ c ] & mask;\n\t\t}\n\n\t\tif ( ((mat[ row ][ i ] >> j) & 1) == 0 ) // return if not invertible \n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\tfor (k = 0; k < GFBITS * SYS_T; k++)\n\t\t{\n\t\t\tif (k != row)\n\t\t\t{\n\t\t\t\tmask = mat[ k ][ i ] >> j;\n\t\t\t\tmask &= 1;\n\t\t\t\tmask = -mask;\n\n\t\t\t\tfor (c = 0; c < 64; c++)\n\t\t\t\t\tmat[ k ][ c ] ^= mat[ row ][ c ] & mask;\n\t\t\t}\n\t\t}\n\t}\n\n\t// store pk\n\n\ttail = ((GFBITS * SYS_T) & 63) >> 3;\n\n\tfor (i = 0; i < GFBITS * SYS_T; i++)\n\t{\n\t\tu = mat[i][ (GFBITS * SYS_T + 63) / 64 - 1 ];\n\n\t\tfor (k = tail; k < 8; k++)\n\t\t\tpk_ptr[ k - tail ] = (u >> (8*k)) & 0xFF;\n\n\t\tpk_ptr += 8-tail;\n\n\t\tfor (j = (GFBITS * SYS_T + 63) / 64; j < 64; j++)\n\t\t{\n\t\t\tstore8(pk_ptr, mat[i][j]);\n\n\t\t\tpk_ptr += 8;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n","#include \"sk_gen.h\"\n\n#include \"randombytes.h\"\n#include \"params.h\"\n#include \"gf.h\"\n#include \"util.h\"\n\n#include <stdint.h>\n\nint irr_gen(gf *out, gf *f)\n{\n\tint i, j, k, c;\n\n\tgf mat[ SYS_T + 1 ][ SYS_T ];\n\tgf mask, inv, t;\n\n\t// fill matrix\n\n\tmat[0][0] = 1;\n\tfor (i = 1; i < SYS_T; i++)\n\t\tmat[0][i] = 0;\n\n\tfor (i = 0; i < SYS_T; i++)\n\t\tmat[1][i] = f[i];\n\n\tfor (j = 2; j <= SYS_T; j++)\n\t\tGF_mul(mat[j], mat[j-1], f);\n\n\t// gaussian\n\n\tfor (j = 0; j < SYS_T; j++)\n\t{\n\t\tfor (k = j + 1; k < SYS_T; k++)\n\t\t{\n\t\t\tmask = gf_diff(mat[ j ][ j ], mat[ j ][ k ]);\n\n\t\t\tfor (c = 0; c < SYS_T + 1; c++)\n\t\t\t\tmat[ c ][ j ] ^= mat[ c ][ k ] & mask;\n\t\t}\n\n\t\tif ( mat[ j ][ j ] == 0 ) // return if not invertible \n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\t// compute inverse\n\n\t\tinv = gf_inv(mat[ j ][ j ]);\n\n\t\tfor (c = 0; c < SYS_T + 1; c++)\n\t\t\tmat[ c ][ j ] = gf_mul(mat[ c ][ j ], inv) ;\n\n\t\t//\n\n\t\tfor (k = 0; k < SYS_T; k++)\n\t\t{\n\t\t\tt = mat[ j ][ k ];\n\n\t\t\tif (k != j)\n\t\t\t{\n\t\t\t\tfor (c = 0; c < SYS_T + 1; c++)\n\t\t\t\t\tmat[ c ][ k ] ^= gf_mul(mat[ c ][ j ], t);\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\n\tfor (i = 0; i < SYS_T; i++)\n\t\tout[i] = mat[ SYS_T ][ i ];\n\n\tout[ SYS_T ] = 1;\n\n\treturn 0;\n\n}\n\nvoid sk_gen(unsigned char *sk)\n{\n\tuint64_t cond[ COND_BYTES / 8 ];\n\tuint64_t sk_int[ GFBITS ];\n\n\tint i, j;\n\n\tgf irr[ SYS_T + 1 ];\n\tgf f[ SYS_T ];\n\n\twhile (1)\n\t{\n\t\trandombytes((unsigned char *) f, sizeof(f));\n\n\t\tfor (i = 0; i < SYS_T; i++) f[i] &= (1 << GFBITS)-1;\n\n\t\tif ( irr_gen(irr, f) == 0 ) break;\n\t}\n\n\tfor (i = 0; i < GFBITS; i++)\n\t{\n\t\tsk_int[i] = 0;\n\n\t\tfor (j = SYS_T; j >= 0; j--)\n\t\t{\n\t\t\tsk_int[i] <<= 1;\n\t\t\tsk_int[i] |= (irr[j] >> i) & 1;\n\t\t}\n\n\t\tstore8(sk + i*8, sk_int[i]);\n\t}\n\t\n\t//\n\n\trandombytes((unsigned char *) cond, sizeof(cond));\n\n\tfor (i = 0; i < COND_BYTES / 8; i++)\n\t\tstore8(sk + IRR_BYTES + i*8, cond[i]);\n}\n\n","#include \"transpose.h\"\n\nvoid transpose_64x64_compact(uint64_t *out, uint64_t *in)\n{\n\tint i, j, s, p, idx0, idx1;\n\tuint64_t x, y;\n\n\tconst uint64_t mask[6][2] =\n\t{\n\t  {0X5555555555555555, 0XAAAAAAAAAAAAAAAA},\n\t  {0X3333333333333333, 0XCCCCCCCCCCCCCCCC},\n\t  {0X0F0F0F0F0F0F0F0F, 0XF0F0F0F0F0F0F0F0},\n\t  {0X00FF00FF00FF00FF, 0XFF00FF00FF00FF00},\n\t  {0X0000FFFF0000FFFF, 0XFFFF0000FFFF0000},\n\t  {0X00000000FFFFFFFF, 0XFFFFFFFF00000000}\n\t};\n\t\n\t//\n\n\tfor (i = 0; i < 64; i++)\n\t\tout[i] = in[i];\n\n\tfor (j = 5; j >= 0; j--)\n\t{\n\t\ts = 1 << j;\n\n\t\tfor (p = 0; p < 32/s; p++)\n\t\t{\n\t\t\tfor (i = 0; i < s; i++)\n\t\t\t{\n\t\t\t\tidx0 = p*2*s + i;\n\t\t\t\tidx1 = p*2*s + i + s;\n\n\t\t\t\tx = (out[idx0] & mask[j][0]) | ((out[idx1] & mask[j][0]) << s);\n\t\t\t\ty = ((out[idx0] & mask[j][1]) >> s) | (out[idx1] & mask[j][1]);\n\n\t\t\t\tout[idx0] = x;\n\t\t\t\tout[idx1] = y;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid transpose_8x64(uint64_t *in)\n{\n\tconst uint64_t mask[3][2] =\n\t{\n\t  {0X5555555555555555, 0XAAAAAAAAAAAAAAAA},\n\t  {0X3333333333333333, 0XCCCCCCCCCCCCCCCC},\n\t  {0X0F0F0F0F0F0F0F0F, 0XF0F0F0F0F0F0F0F0},\n\t};\n\n\tuint64_t x, y;\n\n\t//\n\t\n\tx = (in[0] & mask[2][0]) | ((in[4] & mask[2][0]) << 4);\n\ty = ((in[0] & mask[2][1]) >> 4) | (in[4] & mask[2][1]);\n\n\tin[0] = x;\n\tin[4] = y;\n\n\tx = (in[1] & mask[2][0]) | ((in[5] & mask[2][0]) << 4);\n\ty = ((in[1] & mask[2][1]) >> 4) | (in[5] & mask[2][1]);\n\n\tin[1] = x;\n\tin[5] = y;\n\n\tx = (in[2] & mask[2][0]) | ((in[6] & mask[2][0]) << 4);\n\ty = ((in[2] & mask[2][1]) >> 4) | (in[6] & mask[2][1]);\n\n\tin[2] = x;\n\tin[6] = y;\n\n\tx = (in[3] & mask[2][0]) | ((in[7] & mask[2][0]) << 4);\n\ty = ((in[3] & mask[2][1]) >> 4) | (in[7] & mask[2][1]);\n\n\tin[3] = x;\n\tin[7] = y;\n\n\t//\n\n\tx = (in[0] & mask[1][0]) | ((in[2] & mask[1][0]) << 2);\n\ty = ((in[0] & mask[1][1]) >> 2) | (in[2] & mask[1][1]);\n\n\tin[0] = x;\n\tin[2] = y;\n\n\tx = (in[1] & mask[1][0]) | ((in[3] & mask[1][0]) << 2);\n\ty = ((in[1] & mask[1][1]) >> 2) | (in[3] & mask[1][1]);\n\n\tin[1] = x;\n\tin[3] = y;\n\n\tx = (in[4] & mask[1][0]) | ((in[6] & mask[1][0]) << 2);\n\ty = ((in[4] & mask[1][1]) >> 2) | (in[6] & mask[1][1]);\n\n\tin[4] = x;\n\tin[6] = y;\n\n\tx = (in[5] & mask[1][0]) | ((in[7] & mask[1][0]) << 2);\n\ty = ((in[5] & mask[1][1]) >> 2) | (in[7] & mask[1][1]);\n\n\tin[5] = x;\n\tin[7] = y;\n\n\t//\n\n\tx = (in[0] & mask[0][0]) | ((in[1] & mask[0][0]) << 1);\n\ty = ((in[0] & mask[0][1]) >> 1) | (in[1] & mask[0][1]);\n\n\tin[0] = x;\n\tin[1] = y;\n\n\tx = (in[2] & mask[0][0]) | ((in[3] & mask[0][0]) << 1);\n\ty = ((in[2] & mask[0][1]) >> 1) | (in[3] & mask[0][1]);\n\n\tin[2] = x;\n\tin[3] = y;\n\n\tx = (in[4] & mask[0][0]) | ((in[5] & mask[0][0]) << 1);\n\ty = ((in[4] & mask[0][1]) >> 1) | (in[5] & mask[0][1]);\n\n\tin[4] = x;\n\tin[5] = y;\n\n\tx = (in[6] & mask[0][0]) | ((in[7] & mask[0][0]) << 1);\n\ty = ((in[6] & mask[0][1]) >> 1) | (in[7] & mask[0][1]);\n\n\tin[6] = x;\n\tin[7] = y;\n}\n","#include \"util.h\"\n\n#include <stdio.h>\n\nvoid store8(unsigned char *out, uint64_t in)\n{\n\tout[0] = (in >> 0x00) & 0xFF;\n\tout[1] = (in >> 0x08) & 0xFF;\n\tout[2] = (in >> 0x10) & 0xFF;\n\tout[3] = (in >> 0x18) & 0xFF;\n\tout[4] = (in >> 0x20) & 0xFF;\n\tout[5] = (in >> 0x28) & 0xFF;\n\tout[6] = (in >> 0x30) & 0xFF;\n\tout[7] = (in >> 0x38) & 0xFF;\n}\n\nuint64_t load8(const unsigned char * in)\n{\n\tint i;\n\tuint64_t ret = in[7];\n\n\tfor (i = 6; i >= 0; i--)\n\t{\n\t\tret <<= 8;\n\t\tret |= in[i];\n\t}\n\n\treturn ret;\n}\n\n","#include \"vec.h\"\n#include \"params.h\"\n\n#include <stdio.h>\n\nvoid vec_mul(uint64_t *h, uint64_t *f, const uint64_t *g)\n{\n\tint i;\n\tuint64_t result[2*GFBITS - 1];\n\n\t//\n\n\tuint64_t t1 = f[11] & g[11];\n\tuint64_t t2 = f[11] & g[9];\n\tuint64_t t3 = f[11] & g[10];\n\tuint64_t t4 = f[9] & g[11];\n\tuint64_t t5 = f[10] & g[11];\n\tuint64_t t6 = f[10] & g[10];\n\tuint64_t t7 = f[10] & g[9];\n\tuint64_t t8 = f[9] & g[10];\n\tuint64_t t9 = f[9] & g[9];\n\tuint64_t t10 = t8 ^ t7;\n\tuint64_t t11 = t6 ^ t4;\n\tuint64_t t12 = t11 ^ t2;\n\tuint64_t t13 = t5 ^ t3;\n\tuint64_t t14 = f[8] & g[8];\n\tuint64_t t15 = f[8] & g[6];\n\tuint64_t t16 = f[8] & g[7];\n\tuint64_t t17 = f[6] & g[8];\n\tuint64_t t18 = f[7] & g[8];\n\tuint64_t t19 = f[7] & g[7];\n\tuint64_t t20 = f[7] & g[6];\n\tuint64_t t21 = f[6] & g[7];\n\tuint64_t t22 = f[6] & g[6];\n\tuint64_t t23 = t21 ^ t20;\n\tuint64_t t24 = t19 ^ t17;\n\tuint64_t t25 = t24 ^ t15;\n\tuint64_t t26 = t18 ^ t16;\n\tuint64_t t27 = f[5] & g[5];\n\tuint64_t t28 = f[5] & g[3];\n\tuint64_t t29 = f[5] & g[4];\n\tuint64_t t30 = f[3] & g[5];\n\tuint64_t t31 = f[4] & g[5];\n\tuint64_t t32 = f[4] & g[4];\n\tuint64_t t33 = f[4] & g[3];\n\tuint64_t t34 = f[3] & g[4];\n\tuint64_t t35 = f[3] & g[3];\n\tuint64_t t36 = t34 ^ t33;\n\tuint64_t t37 = t32 ^ t30;\n\tuint64_t t38 = t37 ^ t28;\n\tuint64_t t39 = t31 ^ t29;\n\tuint64_t t40 = f[2] & g[2];\n\tuint64_t t41 = f[2] & g[0];\n\tuint64_t t42 = f[2] & g[1];\n\tuint64_t t43 = f[0] & g[2];\n\tuint64_t t44 = f[1] & g[2];\n\tuint64_t t45 = f[1] & g[1];\n\tuint64_t t46 = f[1] & g[0];\n\tuint64_t t47 = f[0] & g[1];\n\tuint64_t t48 = f[0] & g[0];\n\tuint64_t t49 = t47 ^ t46;\n\tuint64_t t50 = t45 ^ t43;\n\tuint64_t t51 = t50 ^ t41;\n\tuint64_t t52 = t44 ^ t42;\n\tuint64_t t53 = t52 ^ t35;\n\tuint64_t t54 = t40 ^ t36;\n\tuint64_t t55 = t39 ^ t22;\n\tuint64_t t56 = t27 ^ t23;\n\tuint64_t t57 = t26 ^ t9;\n\tuint64_t t58 = t14 ^ t10;\n\tuint64_t t59 = g[6] ^ g[9];\n\tuint64_t t60 = g[7] ^ g[10];\n\tuint64_t t61 = g[8] ^ g[11];\n\tuint64_t t62 = f[6] ^ f[9];\n\tuint64_t t63 = f[7] ^ f[10];\n\tuint64_t t64 = f[8] ^ f[11];\n\tuint64_t t65 = t64 & t61;\n\tuint64_t t66 = t64 & t59;\n\tuint64_t t67 = t64 & t60;\n\tuint64_t t68 = t62 & t61;\n\tuint64_t t69 = t63 & t61;\n\tuint64_t t70 = t63 & t60;\n\tuint64_t t71 = t63 & t59;\n\tuint64_t t72 = t62 & t60;\n\tuint64_t t73 = t62 & t59;\n\tuint64_t t74 = t72 ^ t71;\n\tuint64_t t75 = t70 ^ t68;\n\tuint64_t t76 = t75 ^ t66;\n\tuint64_t t77 = t69 ^ t67;\n\tuint64_t t78 = g[0] ^ g[3];\n\tuint64_t t79 = g[1] ^ g[4];\n\tuint64_t t80 = g[2] ^ g[5];\n\tuint64_t t81 = f[0] ^ f[3];\n\tuint64_t t82 = f[1] ^ f[4];\n\tuint64_t t83 = f[2] ^ f[5];\n\tuint64_t t84 = t83 & t80;\n\tuint64_t t85 = t83 & t78;\n\tuint64_t t86 = t83 & t79;\n\tuint64_t t87 = t81 & t80;\n\tuint64_t t88 = t82 & t80;\n\tuint64_t t89 = t82 & t79;\n\tuint64_t t90 = t82 & t78;\n\tuint64_t t91 = t81 & t79;\n\tuint64_t t92 = t81 & t78;\n\tuint64_t t93 = t91 ^ t90;\n\tuint64_t t94 = t89 ^ t87;\n\tuint64_t t95 = t94 ^ t85;\n\tuint64_t t96 = t88 ^ t86;\n\tuint64_t t97 = t53 ^ t48;\n\tuint64_t t98 = t54 ^ t49;\n\tuint64_t t99 = t38 ^ t51;\n\tuint64_t t100 = t55 ^ t53;\n\tuint64_t t101 = t56 ^ t54;\n\tuint64_t t102 = t25 ^ t38;\n\tuint64_t t103 = t57 ^ t55;\n\tuint64_t t104 = t58 ^ t56;\n\tuint64_t t105 = t12 ^ t25;\n\tuint64_t t106 = t13 ^ t57;\n\tuint64_t t107 = t1 ^ t58;\n\tuint64_t t108 = t97 ^ t92;\n\tuint64_t t109 = t98 ^ t93;\n\tuint64_t t110 = t99 ^ t95;\n\tuint64_t t111 = t100 ^ t96;\n\tuint64_t t112 = t101 ^ t84;\n\tuint64_t t113 = t103 ^ t73;\n\tuint64_t t114 = t104 ^ t74;\n\tuint64_t t115 = t105 ^ t76;\n\tuint64_t t116 = t106 ^ t77;\n\tuint64_t t117 = t107 ^ t65;\n\tuint64_t t118 = g[3] ^ g[9];\n\tuint64_t t119 = g[4] ^ g[10];\n\tuint64_t t120 = g[5] ^ g[11];\n\tuint64_t t121 = g[0] ^ g[6];\n\tuint64_t t122 = g[1] ^ g[7];\n\tuint64_t t123 = g[2] ^ g[8];\n\tuint64_t t124 = f[3] ^ f[9];\n\tuint64_t t125 = f[4] ^ f[10];\n\tuint64_t t126 = f[5] ^ f[11];\n\tuint64_t t127 = f[0] ^ f[6];\n\tuint64_t t128 = f[1] ^ f[7];\n\tuint64_t t129 = f[2] ^ f[8];\n\tuint64_t t130 = t129 & t123;\n\tuint64_t t131 = t129 & t121;\n\tuint64_t t132 = t129 & t122;\n\tuint64_t t133 = t127 & t123;\n\tuint64_t t134 = t128 & t123;\n\tuint64_t t135 = t128 & t122;\n\tuint64_t t136 = t128 & t121;\n\tuint64_t t137 = t127 & t122;\n\tuint64_t t138 = t127 & t121;\n\tuint64_t t139 = t137 ^ t136;\n\tuint64_t t140 = t135 ^ t133;\n\tuint64_t t141 = t140 ^ t131;\n\tuint64_t t142 = t134 ^ t132;\n\tuint64_t t143 = t126 & t120;\n\tuint64_t t144 = t126 & t118;\n\tuint64_t t145 = t126 & t119;\n\tuint64_t t146 = t124 & t120;\n\tuint64_t t147 = t125 & t120;\n\tuint64_t t148 = t125 & t119;\n\tuint64_t t149 = t125 & t118;\n\tuint64_t t150 = t124 & t119;\n\tuint64_t t151 = t124 & t118;\n\tuint64_t t152 = t150 ^ t149;\n\tuint64_t t153 = t148 ^ t146;\n\tuint64_t t154 = t153 ^ t144;\n\tuint64_t t155 = t147 ^ t145;\n\tuint64_t t156 = t121 ^ t118;\n\tuint64_t t157 = t122 ^ t119;\n\tuint64_t t158 = t123 ^ t120;\n\tuint64_t t159 = t127 ^ t124;\n\tuint64_t t160 = t128 ^ t125;\n\tuint64_t t161 = t129 ^ t126;\n\tuint64_t t162 = t161 & t158;\n\tuint64_t t163 = t161 & t156;\n\tuint64_t t164 = t161 & t157;\n\tuint64_t t165 = t159 & t158;\n\tuint64_t t166 = t160 & t158;\n\tuint64_t t167 = t160 & t157;\n\tuint64_t t168 = t160 & t156;\n\tuint64_t t169 = t159 & t157;\n\tuint64_t t170 = t159 & t156;\n\tuint64_t t171 = t169 ^ t168;\n\tuint64_t t172 = t167 ^ t165;\n\tuint64_t t173 = t172 ^ t163;\n\tuint64_t t174 = t166 ^ t164;\n\tuint64_t t175 = t142 ^ t151;\n\tuint64_t t176 = t130 ^ t152;\n\tuint64_t t177 = t170 ^ t175;\n\tuint64_t t178 = t171 ^ t176;\n\tuint64_t t179 = t173 ^ t154;\n\tuint64_t t180 = t174 ^ t155;\n\tuint64_t t181 = t162 ^ t143;\n\tuint64_t t182 = t177 ^ t138;\n\tuint64_t t183 = t178 ^ t139;\n\tuint64_t t184 = t179 ^ t141;\n\tuint64_t t185 = t180 ^ t175;\n\tuint64_t t186 = t181 ^ t176;\n\tuint64_t t187 = t111 ^ t48;\n\tuint64_t t188 = t112 ^ t49;\n\tuint64_t t189 = t102 ^ t51;\n\tuint64_t t190 = t113 ^ t108;\n\tuint64_t t191 = t114 ^ t109;\n\tuint64_t t192 = t115 ^ t110;\n\tuint64_t t193 = t116 ^ t111;\n\tuint64_t t194 = t117 ^ t112;\n\tuint64_t t195 = t12 ^ t102;\n\tuint64_t t196 = t13 ^ t113;\n\tuint64_t t197 = t1 ^ t114;\n\tuint64_t t198 = t187 ^ t138;\n\tuint64_t t199 = t188 ^ t139;\n\tuint64_t t200 = t189 ^ t141;\n\tuint64_t t201 = t190 ^ t182;\n\tuint64_t t202 = t191 ^ t183;\n\tuint64_t t203 = t192 ^ t184;\n\tuint64_t t204 = t193 ^ t185;\n\tuint64_t t205 = t194 ^ t186;\n\tuint64_t t206 = t195 ^ t154;\n\tuint64_t t207 = t196 ^ t155;\n\tuint64_t t208 = t197 ^ t143;\n\n\tresult[0] = t48;\n\tresult[1] = t49;\n\tresult[2] = t51;\n\tresult[3] = t108;\n\tresult[4] = t109;\n\tresult[5] = t110;\n\tresult[6] = t198;\n\tresult[7] = t199;\n\tresult[8] = t200;\n\tresult[9] = t201;\n\tresult[10] = t202;\n\tresult[11] = t203;\n\tresult[12] = t204;\n\tresult[13] = t205;\n\tresult[14] = t206;\n\tresult[15] = t207;\n\tresult[16] = t208;\n\tresult[17] = t115;\n\tresult[18] = t116;\n\tresult[19] = t117;\n\tresult[20] = t12;\n\tresult[21] = t13;\n\tresult[22] = t1;\n\n\t//\n\n\tfor (i = 2*GFBITS-2; i >= GFBITS; i--)\n\t{\n\t\tresult[i - 9]      ^= result[i]; \n\t\tresult[i - GFBITS] ^= result[i]; \n\t}\n\n\t//\n\n\tfor (i = 0; i < GFBITS; i++)\n\t\th[i] = result[i];\n}\n\nvoid vec_sq(uint64_t *out, uint64_t *in)\n{\n\tint i;\n\tuint64_t result[GFBITS];\n\n\t//\n\n\tresult[0] = in[0]^in[6];\n\tresult[1] = in[11];\n\tresult[2] = in[1]^in[7];\n\tresult[3] = in[6];\n\tresult[4] = in[2] ^ in[11] ^ in[8];\n\tresult[5] = in[7];\n\tresult[6] = in[3]^in[9];\n\tresult[7] = in[8];\n\tresult[8] = in[4]^in[10];\n\tresult[9] = in[9];\n\tresult[10] = in[5] ^ in[11];\n\tresult[11] = in[10];\n\n\t//\n\n\tfor (i = 0; i < GFBITS; i++)\n\t\tout[i] = result[i];\n}\n\nvoid vec_copy(uint64_t *out, const uint64_t *in)\n{\n\tint i;\n\n\tfor (i = 0; i < GFBITS; i++)\n\t\tout[i] = in[i];\n}\n\nuint64_t vec_or(const uint64_t *in)\n{\n\tint i;\n\tuint64_t ret = in[0];\n\n\tfor (i = 1; i < GFBITS; i++)\n\t\tret |= in[i];\n\n\treturn ret;\n}\n\nvoid vec_inv(uint64_t *out, const uint64_t *in)\n{\n\tuint64_t tmp_11[GFBITS];\n\tuint64_t tmp_1111[GFBITS];\n\n\tvec_copy(out, in);\n\n\tvec_sq(out, out);\n\tvec_mul(tmp_11, out, in); // 11\n\n\tvec_sq(out, tmp_11);\n\tvec_sq(out, out);\n\tvec_mul(tmp_1111, out, tmp_11); // 1111\n\n\tvec_sq(out, tmp_1111);\n\tvec_sq(out, out);\n\tvec_sq(out, out);\n\tvec_sq(out, out);\n\tvec_mul(out, out, tmp_1111); // 11111111\n\n\tvec_sq(out, out);\n\tvec_sq(out, out);\n\tvec_mul(out, out, tmp_11); // 1111111111\n\n\tvec_sq(out, out);\n\tvec_mul(out, out, in); // 11111111111\n\n\tvec_sq(out, out); // 111111111110\n}\n\n","#include \"api.h\"\n#include \"crypto_encrypt.h\"\n#include \"randombytes.h\"\n\n\nvoid mceliecejs_init () {\n\trandombytes_stir();\n}\n\nlong mceliecejs_public_key_bytes () {\n\treturn CRYPTO_PUBLICKEYBYTES;\n}\n\nlong mceliecejs_private_key_bytes () {\n\treturn CRYPTO_SECRETKEYBYTES;\n}\n\nlong mceliecejs_encrypted_bytes () {\n\treturn CYPHERTEXT_LEN;\n}\n\nlong mceliecejs_decrypted_bytes () {\n\treturn CYPHERTEXT_LEN - CRYPTO_BYTES;\n}\n\nlong mceliecejs_get_cyphertext_len (uint8_t cyphertext[]) {\n\tfor (long i = CYPHERTEXT_LEN ; i > 0 ; --i) {\n\t\tif (cyphertext[i - 1] != 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nlong mceliecejs_keypair (\n\tuint8_t* public_key,\n\tuint8_t* private_key\n) {\n\treturn crypto_encrypt_keypair(public_key, private_key);\n}\n\nlong mceliecejs_encrypt (\n\tuint8_t* message,\n\tlong message_len,\n\tuint8_t* public_key,\n\tuint8_t cyphertext[]\n) {\n\tunsigned long long cyphertext_len;\n\n\tlong status\t= crypto_encrypt(\n\t\tcyphertext,\n\t\t&cyphertext_len,\n\t\tmessage,\n\t\tmessage_len,\n\t\tpublic_key\n\t);\n\n\tfor (long i = cyphertext_len ; i < CYPHERTEXT_LEN ; ++i) {\n\t\tcyphertext[i]\t= 0;\n\t}\n\n\treturn status;\n}\n\nlong mceliecejs_decrypt (\n\tuint8_t* cyphertext,\n\tuint8_t* private_key,\n\tuint8_t* decrypted\n) {\n\tunsigned long long decrypted_len;\n\n\tlong status\t= crypto_encrypt_open(\n\t\tdecrypted,\n\t\t&decrypted_len,\n\t\tcyphertext,\n\t\tmceliecejs_get_cyphertext_len(cyphertext),\n\t\tprivate_key\n\t);\n\n\tif (status == 0) {\n\t\treturn decrypted_len;\n\t}\n\telse {\n\t\treturn -status;\n\t}\n}\n"]}